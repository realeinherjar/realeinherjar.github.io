[{"content":" Warning: This post has KaTeX enabled, so if you want to view the rendered math formulas, you\u0026rsquo;ll have to unfortunately enable JavaScript.\nNote: All elliptic curve images are made using $\\LaTeX$ and TikZ. The source code is freely available at GitHub.\nWhat the hell is an Elliptic Curve? In this post, I\u0026rsquo;ll try to explain what an elliptic curve is, and why it\u0026rsquo;s so important in cryptography. If you ever used an end-to-end encrypted messaging app, or hold Bitcoin (or any other shitcoin, though I don\u0026rsquo;t recommend it), you\u0026rsquo;ve probably heard of elliptic curves. It is important to know that elliptic curves are not only used in cryptography, but also in many other fields of mathematics, such as number theory, algebraic geometry, and topology.\nMy main argument is that elliptic curves are not that hard to understand. Additionally, since encryption is ubiquitous in our daily lives, understanding them is important to be a well-informed citizen. I\u0026rsquo;ll try to explain the concepts in a simple way, but I\u0026rsquo;ll assume you have some basic knowledge of algebra and math symbols. Finally, I\u0026rsquo;ll use the standard math notation, so that when you read about elliptic curves in other places, you\u0026rsquo;ll be able to make connections more easily.\nWhat is an Elliptic Curve? An elliptic curve is a curve defined by the equation\n$$y^2 = x^3 + ax + b$$\nwhere $a$ and $b$ are real numbers.\nHere\u0026rsquo;s an example of an elliptic curve, if you set $a = 0$ and $b = 7$:\n$$y^2 = x^3 + 7$$\nThis is secp256k1, the notorious elliptic curve used in Bitcoin.\nsecp256k1 curve Elliptic curves have some properties that make them interesting. For example, they are symmetric with respect to the $x$-axis. This means that if $(x, y)$ is a point in the curve, then $(x, -y)$ is also a point in the curve1. This is because $(-y)^2 = y^2$.\nAdding Points in an Elliptic Curve If you have two points $P$ and $P^\\prime$ in the curve, then the line that passes through them will intersect the curve in a third point2 $P^{\\prime\\prime}$:\nTwo Points in an Elliptic Curve If you reflect $P^{\\prime\\prime}$ with respect to the $x$-axis, you\u0026rsquo;ll get a new point:\nAdding Two Points in an Elliptic Curve This is how you add two points in an elliptic curve. Note that the result of adding two points is also a point in the curve. This property is called closure. For any two points $P$ and $P^\\prime$ in the curve, $P + P^\\prime$ is also a point in the curve.\nThere are two cases where the line doesn\u0026rsquo;t intersect the curve in a third point. The first one is when $P = P^\\prime$.\nAdding a Point to Itself in an Elliptic Curve Then we have a tangent line. In this case we take derivatives on both sides:\n$$\\begin{aligned} y^2 \u0026amp;= x^3 + ax + b \\\\ 2y \\frac{dy}{dx} \u0026amp;= 3x^2 + a \\\\ \\frac{dy}{dx} \u0026amp;= \\frac{3x^2 + a}{2y} \\end{aligned}$$\nHence, $2*P = (x, y)$ where $x = \\left( \\frac{3x^2 + a}{2y} \\right) - 2x$, and $y = \\left( \\frac{3x^2 + a}{2y} \\right) (x - x) - y$.\nThe other is when $P^\\prime$ is the reflection of $P$ with respect to the $x$-axis.\nAdding a Point to Its Reflection in an Elliptic Curve Then we have a vertical line. In this case we define $P + P^\\prime = \\mathcal{O}$, where $\\mathcal{O}$ is the point at infinity.\nPoint Addition Properties Point addition satisfies some properties:\nIdentity: $P + \\mathcal{O} = \\mathcal{O} + P = P$ Commutativity: $P + P^\\prime = P^\\prime + P$ Associativity: $(P + P^\\prime) + P^{\\prime\\prime} = P + (P^\\prime + P^{\\prime\\prime})$ Inverse Element: $P + (-P) = \\mathcal{O}$ Closure: $P + P^\\prime$ is a point in the curve Hey this is very similar to addition of integers! But using points instead of integers.\nIn fact, we can define multiplication of a point $P$ by an integer $n$ as:\n$$\\underbrace{P + P + \\cdots + P}_{n \\text{ times}}$$\nAbelian Groups The set of points in an elliptic curve with the point at infinity $\\mathcal{O}$ along with a binary operation $+$ that satisfies the properties above is called an Abelian group. In honor of Niels Henrik Abel, an Abelian group is a set with a binary operation that satisfies all the properties above.\nAnother example of an Abelian group is the set of integers $\\mathbb{Z}$ with addition $+$. And another one is the set of natural numbers $\\mathbb{N}$ with multiplication $\\times$.\nFields There\u0026rsquo;s one more concept that we need to learn before we can talk about cryptography. It\u0026rsquo;s called a finite field. But before we talk about finite fields, we need to first define a field. Fields are sets with two binary operations, called addition $+$ and multiplication $\\times$. We write\n$$F = (F, +, \\times)$$\nto denote a field, where $F$ is the set, $+$ is the addition operation, and $\\times$ is the multiplication operation.\nAddition and multiplication behave similar to the addition and multiplication of real numbers. For example, addition is commutative and associative\n$$a + b = b + a,$$\nand multiplication is distributive\n$$a \\times (b + c) = a \\times b + a \\times c.$$\nAlso, there are two special elements in the field, called the additive identity $-a$ and the multiplicative identity $a^{-1}$, such that\n$$a + (-a) = I,$$\nand\n$$a \\times a^{-1} = I,$$\nwhere $I$ is the identity element.\nNote that this allows us to define subtraction\n$$a - b = a + (-b),$$\nand division\n$$a \\div b = a \\times b^{-1}.$$\nFinite Fields Now we are ready for finite fields. A finite field, also called a Galois field (in honor of Ã‰variste Galois), is a field with a finite number of elements. As with any field, a finite field is a set on which the operations of multiplication, addition, subtraction and division are defined and satisfy the rules above for fields.\nFinite fields is a very rich topic in mathematics, and there are many ways to construct them. The easiest way to construct a finite field is to take the integers modulo a prime number $p$. For example $\\mathbb{Z}_4$ is a finite field with 4 elements:\n$$\\mathbb{Z}_4 = \\lbrace 0, 1, 2, 3 \\rbrace.$$\nIn general, $\\mathbb{Z}_n$ is a finite field with $n$ elements:\n$$\\mathbb{Z}_n = \\lbrace 0, 1, 2, \\ldots, n - 1 \\rbrace.$$\nThe number of elements in a finite field is called the order of the field. The order of a finite field is always a prime number $p$. The $\\mathbb{Z}_4$ example above is a finite field of order 2. To see that notice that $4$ is a composite number,\n$$4 = 2 \\times 2.$$\nAnd we can write $\\mathbb{Z}_4$ as\n$$\\mathbb{Z}_4 = 2 \\times \\mathbb{Z}_2.$$\nThis means that every element in $a \\in \\mathbb{Z}_4$ can be written as\n$$a = 2 \\times b,$$\nwhere $b$ is an element in $\\mathbb{Z}_2$.\nHence, not every element of $\\mathbb{Z}_4$ is unique, and they are equivalent to the elements in $\\mathbb{Z}_2$.\nIn general if $n$ is a composite number, then $\\mathbb{Z}_n$ is not a finite field. However, if $n = r \\times s$ where $r$ and $s$ are prime numbers, and $r \u0026lt; s$, then $\\mathbb{Z}_n$ is a finite field of order $r$.\nOperations in Finite Fields Addition in finite fields is defined as the remainder of the sum of two elements modulo the order of the field.\nFor example, in $\\mathbb{Z}_3$,\n$$1 + 2 = 3 \\mod 3 = 0.$$\nWe can also define subtraction in finite fields as the remainder of the difference of two elements modulo the order of the field.\nFor example, in $\\mathbb{Z}_3$,\n$$1 - 2 = -1 \\mod 3 = 2.$$\nMultiplication in finite fields can be written as multiple additions. For example, in $\\mathbb{Z}_3$,\n$$2 \\times 2 = 2 + 2 = 4 \\mod 3 = 1.$$\nExponentiation in finite fields can be written as multiple multiplications. For example, in $\\mathbb{Z}_3$,\n$$2^2 = 2 \\times 2 = 4 \\mod 3 = 1.$$\nThis is very trivial for any finite field. However, for division we are pretty much screwed. It is really hard to find the multiplicative inverse of an element in a finite field. For example, suppose that we have numbers $a,b$ in a very large finite field $\\mathbb{Z}_n$, such that\n$$c = a \\times b \\mod n.$$\nThen we can write division as\n$$a = c \\div b = c \\times b^{-1} \\mod n.$$\nNow we need to find $b^{-1}$. This is called the discrete logarithm problem. Because we need to find the exponent $b^{-1}$ such that\n$$b^{-1} = \\log_b c \\mod n.$$\nSince this number is a discrete number and not a real number, that\u0026rsquo;s why it\u0026rsquo;s called the discrete logarithm problem.\nGood luck my friend, no efficient method is known for computing them in general. You can try brute force, but that\u0026rsquo;s not efficient.\nWhy the Discrete Logarithm Problem is Hard as Fuck To get a feeling why the discrete logarithm problem is difficult, let\u0026rsquo;s add one more concept to our bag of knowledge. Every finite field has generators, also known as primitive roots, which is also a member of the group, such that applying multiplication to this one single element makes possible to generate the whole finite field.\nLet\u0026rsquo;s illustrate this with an example. Below we have a table of all the results of the following operation\n$$b^x \\mod 7$$\nfor every possible value of $x$. As you\u0026rsquo;ve guessed right this is the $\\mathbb{Z}_7$ finite field.\n$b$ $b^1 \\mod 7$ $b^2 \\mod 7$ $b^3 \\mod 7$ $b^4 \\mod 7$ $b^5 \\mod 7$ $b^6 \\mod 7$ $1$ $1$ $1$ $1$ $1$ $1$ $1$ $2$ $2$ $4$ $1$ $2$ $4$ $1$ $3$ $3$ $2$ $6$ $4$ $5$ $1$ $4$ $4$ $2$ $1$ $4$ $2$ $1$ $5$ $5$ $4$ $6$ $2$ $3$ $1$ $6$ $6$ $1$ $6$ $1$ $1$ $1$ You see that something interesting is happening here. For specific values of $b$, such as $b = 3$, and $b = 5$, we are able to generate the whole finite field. Hence, say that $3$ and $5$ are generators or primitive roots of $\\mathbb{Z}_7$.\nNow suppose I ask you to find $x$ in the following equation\n$$3^x \\mod p = 11$$\nwhere $p$ is a very large prime number. Then you don\u0026rsquo;t have any other option than brute forcing it. You\u0026rsquo;ll need to try each exponent $x$ until you find the one that satisfies the equation.\nNotice that this operation is very asymmetric. It is very easy to compute $3^x \\mod p$ for any $x$, but it is very hard to find $x$ given $3^x \\mod p$.\nBringing it All Together Now we are ready to talk about elliptic curve cryptography. Elliptic curve cryptography is a public-key encryption technique based on elliptic curves. It is used to create public and private keys for asymmetric cryptography.\nYour private key is a random number $k$. Your public key is the point $kG$ in the elliptic curve, where $G$ is a point and a generator of the elliptic curve. We know that $kG$ is a point in the elliptic curve, because elliptic curves are Abelian groups, having the closure property, then\n$$kG = \\underbrace{G + G + \\cdots + G}_{k \\text{ times}}$$\nis also a point in the elliptic curve.\nNow here comes the grand finale. Since elliptic curves are finite fields, then we can use the discrete logarithm problem to our advantage. It is very easy to compute $kG$ given $k$ and $G$. But it is hard as fuck to find $k$ given $kG$ and $G$.\nThe secp256k1 Elliptic Curve Let\u0026rsquo;s talk about some facts3 about our muse secp256k1 elliptic curve:\nEquation: $y^2 = x^3 + 7$ $\\mathbb{F}_p$ where $p$: $2^{256} - 2^{32} - 2^9 - 2^8 - 2^7 - 2^6 - 2^4 - 1$ (yes, it is a prime number) Order $n$: this is the number of possible points in the curve4, 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd03641415 Generator Point $G$: (0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798, 0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8)5 License This post is licensed under Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International.\nThis is also why transaction malleability was a problem before Segwit in Bitcoin.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nIf the line is vertical or tangent to the curve, then it intersects the curve in a point at infinity.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nThese are standard and defined in the Standards for Efficient Cryptography Group in their SEC 2 specification.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nTo find the order of an elliptic curve, you can use Schoof\u0026rsquo;s algorithm.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nIt is a fucking big number, so I am putting the values in hexadecimal representation.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://realeinherjar.github.io/2023-10-08-elliptic_curves/","summary":"Warning: This post has KaTeX enabled, so if you want to view the rendered math formulas, you\u0026rsquo;ll have to unfortunately enable JavaScript.\nNote: All elliptic curve images are made using $\\LaTeX$ and TikZ. The source code is freely available at GitHub.\nWhat the hell is an Elliptic Curve? In this post, I\u0026rsquo;ll try to explain what an elliptic curve is, and why it\u0026rsquo;s so important in cryptography. If you ever used an end-to-end encrypted messaging app, or hold Bitcoin (or any other shitcoin, though I don\u0026rsquo;t recommend it), you\u0026rsquo;ve probably heard of elliptic curves.","title":"What the hell is an Elliptic Curve?"},{"content":" Warning: This post has KaTeX enabled, so if you want to view the rendered math formulas, you\u0026rsquo;ll have to unfortunately enable JavaScript.\nWhile attending the 2023 edition of TabConf, hosted in Atlanta, USA, from Sep 6th to Sep 9th, I also attended Base58\u0026rsquo;s intensive course on Taproot and Schnorr signatures. The course took place in the two days before the conference, on Sep 4th and Sep 5th.\nHere is a very broad overview based on my notes, a bunch of readings and some of my own research. I am omitting a lot of details here. If you want to learn more, whenever you see a footnote, or a like to a Bitcoin Imporvement Proposal (BIP), go check it out.\nTaproot Design Goals Taproot was activated as a soft fork in November 2021.\nThe design goals of Taproot are:\nIncrease privacy: hide the spending conditions and also hide the fact that you are using a multisig. Reduce the amount of data on-chain: you only need to commit to the root of the tree, and not the leaves. Use Schnorr: Schnorr signatures are more efficient and allow for signature aggregation. Schnorr Signatures Schnorr signatures are a type of digital signature scheme that provides security and efficiency advantages over traditional ECDSA (Elliptic Curve Digital Signature Algorithm) signatures. They were proposed by the mathematician and cryptographer Claus-Peter Schnorr. Schnorr signatures improve privacy, scalability, and security. Due to the commutativity property, Schnorr signatures can be aggregated, allowing multiple signatures to be combined into a single signature. This improves privacy by obscuring the number of participants in a multi-signature transaction. They are detailed in BIP 340. The nice thing about Schnorr signatures is that the sum of private keys is equal to the private key of the sum of public keys. This is what I call \u0026ldquo;commutativity property\u0026rdquo;, and allows for signature aggregation1.\nHere\u0026rsquo;s in a more formal way:\n$$ P = p \\cdot G $$\nwhere $G$ is the generator point2 and $p$ is the sum of $n$ private keys,\n$$ p = \\sum_{i=1}^{n} p_i $$\nand $P$ is the sum of $n$ public keys3:\n$$ P = \\sum_{i=1}^{n} p_i \\cdot G $$\nValidation of Taproot Scripts The validation of Taproot Scripts as detailed in BIP 342, that deals with OP_CHECKSIG and OP_CHECKSIGADD opcodes4. This does Schnorr signature aggregation during the Script execution.\nA 2-of-3 multisig with Schnorr signatures spending Script with OP_CHECKSIG and OP_CHECKSIGADD would be:\npubkey1 OP_CHECKSIG pubkey2 OP_CHECKSIGADD pubkey3 OP_CHECKSIGADD OP_2 OP_EQUAL This would reveal everyone\u0026rsquo;s public keys on-chain, and also the fact that it is a multisig, with all of the conditions. Additionally, it would be expensive to spend, due to the number of bytes required to commit to the Script on-chain.\nThere are more elegant ways to do this with Taproot Spending Rules and Merkle Trees, which we\u0026rsquo;ll see next.\nTaproot Merkle Tree Taproot is a series of spending conditions that are defined in a binary tree. Instead of a bunch of conditions that are visible using a Script, we have a binary tree with merkle roots.\nRoot | | / \\ / \\ / \\ Cond 1 Cond 2 / \\ / \\ Cond 3 Cond 4 The root is a hash, and is implicity commited to on-chain. The conditions are not visible on-chain, because you just commit the hash of the root on-chain.\nThe way you build the root is by hashing all the intermediate states5, is by hashing all the leaves and branches below the root node. This is done using a $\\operatorname{hash}(l \\mid\\mid r)$ function, where $l$ is the left node and $r$ is the right node6. The locking script will be:\nscript: \u0026lt;version-byte\u0026gt; \u0026lt;data\u0026gt; where:\n\u0026lt;version-byte\u0026gt; is the version byte. This is the version number of our \u0026ldquo;segwit script\u0026rdquo;. \u0026lt;data\u0026gt; is P_x, the x-coordinate of the (tweaked) public key7. Taproot Spending Rules Taproot spending rules are detailed in BIP 341. The way Taproot works is that you have a locking script where all the spending conditions are hidden. This is just the hash of the root of the binary tree below. The way you construct the script is by using a merkle tree, and hashing all the intermediate states, i.e. all the leaves and branches below the root node. The hash is done by concatenating the string representation of the two things you want to hash and applying SHA2566:\nhash = SHA256(left || right) In the following example, you would hash Cond 3 with Cond 4, then hash the result with Cond 1. This is the root commitment, i.e. the root node, and the thing you publish on-chain.\nRoot commitment (locking script) | | / \\ / \\ / \\ Cond 1 Cond 2 (leaf) (branch) / \\ / \\ Cond 3 Cond 4 (leaf) (leaf) We have 3 leaves here: Cond 1, Cond 3 and Cond 4, and 1 branch: Cond 2.\nThe way the spening rules work is that you have to provide a proof-of-inclusion, which depends on the leaf you want to spend. So if you want to spend Cond 3, you need to provide the hash of Cond 4 and Cond 1. Whereas, if you want to spend Cond 1, you just need to provide the hash of Cond 1 and the hash of the branch Cond 2. Hence, spending conditions that are higher in the tree are cheaper to spend, because you need to commit less data on-chain. That is why we structure the tree as most probable to be used on top.\nMuSig2 MuSig2, detailed in BIP 327, is similar to OP_CHECKSIGADD. It allows for signature aggregation in the locking script, and also in the unlocking script. Hence, you can have any multisig with Schnorr signatures, without revealing anything related to the number of participants on-chain, multisig conditions, etc. However, you now need to put all the possible combinations of the pubkeys in the Script. Mind you that this is not a problem, because the resulting aggregate signature will not reveal the underlying individual signatures.\nHere\u0026rsquo;s a MuSig2 example 2-of-3 threshold, you\u0026rsquo;ll need 3 spending conditions:\n$$P_1 + P_2$$ $$P_1 + P_3$$ $$P_2 + P_3$$\nwhere $P_n$ is the public key of the $n$-th participant.\nGenerally, for $n$ pubkeys with a threshold of $t$, you need a list of size $\\binom{n}{t}$ for all possible combinations.\nContinuing the example, for every two pairs of pubkeys, aggregate them using elliptic curve cryptography modular algebra, tweak them (if necessary)7, and create a script:\n(P_1 + P_2) OP_CHECKSIG Next, you consruct your Taproot tree listing all the possible spending conditions. (Remember to prioritize by the most plausible spending conditions on top). Calculate the root commitment by hashing all the intermediate states, which are the spending conditions on each leaf or branch, from bottom to top. Pick an internal key and if necessary, tweak7 it to derive an external key. Finally, lock up some bitcoin to the root commitment. That\u0026rsquo;s it! You have a Taproot tree with MuSig2 that is compact on-chain, and also private. Additionally, you can add more creative spending conditions using Script to the leaves of the tree.\nTo spend it, in your unlocking script, you\u0026rsquo;ll need to provide a proof-of-inclusion of the spending condition you want to spend, and the aggregated signature to unlock that spending condition.\nLicense This post is licensed under Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International.\nSignature aggregations depends on a series of rounds of communication, proposed in MuSig (3 rounds of communication), and superseeded by MuSig2 (which needs 2 rounds of communication, instead of 3) and detailed in BIP 327. There are tweaks to the internal key, and also nonce generation and aggregation. I won\u0026rsquo;t go in to the scope of BIP 327 here, but I recommend you to read it if you want to know more.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nIf you don\u0026rsquo;t know what a generator point is, check the Wikipedia article on Elliptic Curve Cryptography.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nDon\u0026rsquo;t forget to $\\mod{n}$.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nSee the Script page at Bitcoin Wiki.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nAdditionally you need to provide a tag, which are detailed in BIP 340.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nThere are some rules to remove ambiguity on which one will be the left and right node in the hash function.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nIn Taproot Spending rules, you can have an internal key and an external key. The internal key is tweaked with \u0026ldquo;tag\u0026rdquo; hashes to derive the external key. Check BIP 341.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://realeinherjar.github.io/2023-09-08-taproot/","summary":"Warning: This post has KaTeX enabled, so if you want to view the rendered math formulas, you\u0026rsquo;ll have to unfortunately enable JavaScript.\nWhile attending the 2023 edition of TabConf, hosted in Atlanta, USA, from Sep 6th to Sep 9th, I also attended Base58\u0026rsquo;s intensive course on Taproot and Schnorr signatures. The course took place in the two days before the conference, on Sep 4th and Sep 5th.\nHere is a very broad overview based on my notes, a bunch of readings and some of my own research.","title":"Taproot Basics"},{"content":"In Brazil, there\u0026rsquo;s a new law that is being proposed that will allow the government to censor social media posts. The law is called PL 2630/2020 and it\u0026rsquo;s being called the \u0026ldquo;Fake News Law\u0026rdquo;. It\u0026rsquo;s a very dangerous law that will allow the government to censor any post that it deems \u0026ldquo;fake news\u0026rdquo;. The problem is that the definition of \u0026ldquo;fake news\u0026rdquo; is very broad and can be used to censor any post that the government doesn\u0026rsquo;t like.\nIt is actually already being used to do exactly that. On May 2nd, 2023, the Ministry of Justice ordered Google to remove a blog post from its main page. This blog post was Google\u0026rsquo;s opinion on the law and why Google think it is bad. You can find it here.\nThen, on May 12th, 2023, the Supreme Minister Alexandre de Moraes opened a criminal investigation of the Google (and Telegram) directors, on the grounds of \u0026ldquo;abusive campaign against the PL 2630/2020\u0026rdquo;. I don\u0026rsquo;t think that constitutes a crime, but the Supreme Minister does. For my point of view, it\u0026rsquo;s just an opinion, and it\u0026rsquo;s not a crime to have an opinion. Despite not liking Google, I think that it is a valid participant in the discussion of the law. Such discussions should happen in a healthy democracy.\nOf course, Google used its power to promote its opinion, but again that\u0026rsquo;s not a crime. Let\u0026rsquo;s do a thought experiment, let\u0026rsquo;s go back to 1850s USA. Dred Scott v. Sandford (1857), according to Wikipedia, was a \u0026ldquo;landmark decision of the United States Supreme Court that held the U.S. Constitution did not extend American citizenship to people of black African descent, and thus they could not enjoy the rights and privileges the Constitution conferred upon American citizens\u0026rdquo;. That\u0026rsquo;s pretty bad decision, right? Anyone in their right mind today would agree that violates human rights. Now, imagine that one of the most powerful companies at that time, Pacific Main Steamship Company, would use its power to promote the abolitionist movement. Specifically, it would give a pamphlet to every passenger that boarded its ships with the opinion that the American citizenship should be extended to people of \u0026ldquo;black African descent\u0026rdquo;. What would happen to the company? Would it be a crime to promote the abolitionist movement? Would the Supreme Court open a criminal investigation against the company and its directors? Think about this for a moment\u0026hellip;\nThe problem with censorship is that it\u0026rsquo;s very easy to abuse. I honestly don\u0026rsquo;t care about Google, or the PL 2630/2020. I know that the internet is decentralized, and content will always find its way and be available somewhere. There\u0026rsquo;s no way to stop it. But, I am gravely concerned with the precedents that the Brazilian government and Brazilian Supreme Court are setting when they censor opinions that they don\u0026rsquo;t like.\nLicense This post is licensed under Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International.\n","permalink":"https://realeinherjar.github.io/2023-08-19-censorship/","summary":"In Brazil, there\u0026rsquo;s a new law that is being proposed that will allow the government to censor social media posts. The law is called PL 2630/2020 and it\u0026rsquo;s being called the \u0026ldquo;Fake News Law\u0026rdquo;. It\u0026rsquo;s a very dangerous law that will allow the government to censor any post that it deems \u0026ldquo;fake news\u0026rdquo;. The problem is that the definition of \u0026ldquo;fake news\u0026rdquo; is very broad and can be used to censor any post that the government doesn\u0026rsquo;t like.","title":"On Censorship"},{"content":"This is a nym. I\u0026rsquo;m a recovering academic in my mid-30s. I hold a PhD and was a faculty member in a computer science department for 5 years. My background is in computational statistics and machine learning. I\u0026rsquo;ve supervised a couple of PhD students, and taught undergraduate and graduate courses in machine learning, deep learning, statistics, data science, and programming.\nI am fluent in Rust, Python, and C/C++. Due to my data science background, I also know R, SQL, and Julia. I am comfortable in navigating almost any codebase, disrespecting the programming language, and also in learning new languages and frameworks. I am avid Nix user and advocate. My workflow, both personal and professional, is heavily based on Git and GitHub: PRs, issues, code reviews, CI/CD, project management, releases, etc. I have solid experience with Docker, Linux and Nix environments, and cloud computing. As a computational scientist, I am familiar with cryptography, and I have advanced math skills.\nDuring the day, I work full-time as a senior scientific software engineer at a software company. In my free time, I follow the technical developments of Bitcoin, and also contribute to the ecosystem. I have a deep understanding of the Bitcoin protocol, lightning network, and the ecosystem in general. I also have a good understanding of the economics and game theory behind Bitcoin. Furthermore, I have knowledge about the codebases of open-source Bitcoin projects, mainly in Rust and C/C++.\nCheck my portfolio at GitHub for some of my projects. If you want a full CV, please contact me.\n","permalink":"https://realeinherjar.github.io/about/","summary":"This is a nym. I\u0026rsquo;m a recovering academic in my mid-30s. I hold a PhD and was a faculty member in a computer science department for 5 years. My background is in computational statistics and machine learning. I\u0026rsquo;ve supervised a couple of PhD students, and taught undergraduate and graduate courses in machine learning, deep learning, statistics, data science, and programming.\nI am fluent in Rust, Python, and C/C++. Due to my data science background, I also know R, SQL, and Julia.","title":"About"}]