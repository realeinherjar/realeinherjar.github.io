[{"content":" Warning: This post has KaTeX enabled, so if you want to view the rendered math formulas, you\u0026rsquo;ll have to unfortunately enable JavaScript.\nWhile attending the 2023 edition of TabConf, hosted in Atlanta, USA, from Sep 6th to Sep 9th, I also attended Base58\u0026rsquo;s intensive course on Taproot and Schnorr signatures. The course took place in the two days before the conference, on Sep 4th and Sep 5th.\nHere is a very broad overview based on my notes, a bunch of readings and some of my own research. I am omitting a lot of details here. If you want to learn more, whenever you see a footnote, or a like to a Bitcoin Imporvement Proposal (BIP), go check it out.\nTaproot Design Goals Taproot was activated as a soft fork in November 2021.\nThe design goals of Taproot are:\nIncrease privacy: hide the spending conditions and also hide the fact that you are using a multisig. Reduce the amount of data on-chain: you only need to commit to the root of the tree, and not the leaves. Use Schnorr: Schnorr signatures are more efficient and allow for signature aggregation. Schnorr Signatures Schnorr signatures are a type of digital signature scheme that provides security and efficiency advantages over traditional ECDSA (Elliptic Curve Digital Signature Algorithm) signatures. They were proposed by the mathematician and cryptographer Claus-Peter Schnorr. Schnorr signatures improve privacy, scalability, and security. Due to the commutativity property, Schnorr signatures can be aggregated, allowing multiple signatures to be combined into a single signature. This improves privacy by obscuring the number of participants in a multi-signature transaction. They are detailed in BIP 340. The nice thing about Schnorr signatures is that the sum of private keys is equal to the private key of the sum of public keys. This is what I call \u0026ldquo;commutativity property\u0026rdquo;, and allows for signature aggregation1.\nHere\u0026rsquo;s in a more formal way:\n$$ P = p \\cdot G $$\nwhere $G$ is the generator point2 and $p$ is the sum of $n$ private keys,\n$$ p = \\sum_{i=1}^{n} p_i $$\nand $P$ is the sum of $n$ public keys3:\n$$ P = \\sum_{i=1}^{n} p_i \\cdot G $$\nValidation of Taproot Scripts The validation of Taproot Scripts as detailed in BIP 342, that deals with OP_CHECKSIG and OP_CHECKSIGADD opcodes4. This does Schnorr signature aggregation during the Script execution.\nA 2-of-3 multisig with Schnorr signatures spending Script with OP_CHECKSIG and OP_CHECKSIGADD would be:\npubkey1 OP_CHECKSIG pubkey2 OP_CHECKSIGADD pubkey3 OP_CHECKSIGADD OP_2 OP_EQUAL This would reveal everyone\u0026rsquo;s public keys on-chain, and also the fact that it is a multisig, with all of the conditions. Additionally, it would be expensive to spend, due to the number of bytes required to commit to the Script on-chain.\nThere are more elegant ways to do this with Taproot Spending Rules and Merkle Trees, which we\u0026rsquo;ll see next.\nTaproot Merkle Tree Taproot is a series of spending conditions that are defined in a binary tree. Instead of a bunch of conditions that are visible using a Script, we have a binary tree with merkle roots.\nRoot | | / \\ / \\ / \\ Cond 1 Cond 2 / \\ / \\ Cond 3 Cond 4 The root is a hash, and is implicity commited to on-chain. The conditions are not visible on-chain, because you just commit the hash of the root on-chain.\nThe way you build the root is by hashing all the intermediate states5, is by hashing all the leaves and branches below the root node. This is done using a $\\operatorname{hash}(l \\mid\\mid r)$ function, where $l$ is the left node and $r$ is the right node6. The locking script will be:\nscript: \u0026lt;version-byte\u0026gt; \u0026lt;data\u0026gt; where:\n\u0026lt;version-byte\u0026gt; is the version byte. This is the version number of our \u0026ldquo;segwit script\u0026rdquo;. \u0026lt;data\u0026gt; is P_x, the x-coordinate of the (tweaked) public key7. Taproot Spending Rules Taproot spending rules are detailed in BIP 341. The way Taproot works is that you have a locking script where all the spending conditions are hidden. This is just the hash of the root of the binary tree below. The way you construct the script is by using a merkle tree, and hashing all the intermediate states, i.e. all the leaves and branches below the root node. The hash is done by concatenating the string representation of the two things you want to hash and applying SHA2566:\nhash = SHA256(left || right) In the following example, you would hash Cond 3 with Cond 4, then hash the result with Cond 1. This is the root commitment, i.e. the root node, and the thing you publish on-chain.\nRoot commitment (locking script) | | / \\ / \\ / \\ Cond 1 Cond 2 (leaf) (branch) / \\ / \\ Cond 3 Cond 4 (leaf) (leaf) We have 3 leaves here: Cond 1, Cond 3 and Cond 4, and 1 branch: Cond 2.\nThe way the spening rules work is that you have to provide a proof-of-inclusion, which depends on the leaf you want to spend. So if you want to spend Cond 3, you need to provide the hash of Cond 4 and Cond 1. Whereas, if you want to spend Cond 1, you just need to provide the hash of Cond 1 and the hash of the branch Cond 2. Hence, spending conditions that are higher in the tree are cheaper to spend, because you need to commit less data on-chain. That is why we structure the tree as most probable to be used on top.\nMuSig2 MuSig2, detailed in BIP 327, is similar to OP_CHECKSIGADD. It allows for signature aggregation in the locking script, and also in the unlocking script. Hence, you can have any multisig with Schnorr signatures, without revealing anything related to the number of participants on-chain, multisig conditions, etc. However, you now need to put all the possible combinations of the pubkeys in the Script. Mind you that this is not a problem, because the resulting aggregate signature will not reveal the underlying individual signatures.\nHere\u0026rsquo;s a MuSig2 example 2-of-3 threshold, you\u0026rsquo;ll need 3 spending conditions:\n$$P_1 + P_2$$ $$P_1 + P_3$$ $$P_2 + P_3$$\nwhere $P_n$ is the public key of the $n$-th participant.\nGenerally, for $n$ pubkeys with a threshold of $t$, you need a list of size $\\binom{n}{t}$ for all possible combinations.\nContinuing the example, for every two pairs of pubkeys, aggregate them using elliptic curve cryptography modular algebra, tweak them (if necessary)7, and create a script:\n(P_1 + P_2) OP_CHECKSIG Next, you consruct your Taproot tree listing all the possible spending conditions. (Remember to prioritize by the most plausible spending conditions on top). Calculate the root commitment by hashing all the intermediate states, which are the spending conditions on each leaf or branch, from bottom to top. Pick an internal key and if necessary, tweak7 it to derive an external key. Finally, lock up some bitcoin to the root commitment. That\u0026rsquo;s it! You have a Taproot tree with MuSig2 that is compact on-chain, and also private. Additionally, you can add more creative spending conditions using Script to the leaves of the tree.\nTo spend it, in your unlocking script, you\u0026rsquo;ll need to provide a proof-of-inclusion of the spending condition you want to spend, and the aggregated signature to unlock that spending condition.\nLicense This post is licensed under Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International.\nSignature aggregations depends on a series of rounds of communication, proposed in MuSig (3 rounds of communication), and superseeded by MuSig2 (which needs 2 rounds of communication, instead of 3) and detailed in BIP 327. There are tweaks to the internal key, and also nonce generation and aggregation. I won\u0026rsquo;t go in to the scope of BIP 327 here, but I recommend you to read it if you want to know more.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nIf you don\u0026rsquo;t know what a generator point is, check the Wikipedia article on Elliptic Curve Cryptography.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nDon\u0026rsquo;t forget to $\\mod{n}$.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nSee the Script page at Bitcoin Wiki.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nAdditionally you need to provide a tag, which are detailed in BIP 340.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nThere are some rules to remove ambiguity on which one will be the left and right node in the hash function.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nIn Taproot Spending rules, you can have an internal key and an external key. The internal key is tweaked with \u0026ldquo;tag\u0026rdquo; hashes to derive the external key. Check BIP 341.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://realeinherjar.github.io/2023-09-08-taproot/","summary":"Warning: This post has KaTeX enabled, so if you want to view the rendered math formulas, you\u0026rsquo;ll have to unfortunately enable JavaScript.\nWhile attending the 2023 edition of TabConf, hosted in Atlanta, USA, from Sep 6th to Sep 9th, I also attended Base58\u0026rsquo;s intensive course on Taproot and Schnorr signatures. The course took place in the two days before the conference, on Sep 4th and Sep 5th.\nHere is a very broad overview based on my notes, a bunch of readings and some of my own research.","title":"Taproot Basics"},{"content":"In Brazil, there\u0026rsquo;s a new law that is being proposed that will allow the government to censor social media posts. The law is called PL 2630/2020 and it\u0026rsquo;s being called the \u0026ldquo;Fake News Law\u0026rdquo;. It\u0026rsquo;s a very dangerous law that will allow the government to censor any post that it deems \u0026ldquo;fake news\u0026rdquo;. The problem is that the definition of \u0026ldquo;fake news\u0026rdquo; is very broad and can be used to censor any post that the government doesn\u0026rsquo;t like.\nIt is actually already being used to do exactly that. On May 2nd, 2023, the Ministry of Justice ordered Google to remove a blog post from its main page. This blog post was Google\u0026rsquo;s opinion on the law and why Google think it is bad. You can find it here.\nThen, on May 12th, 2023, the Supreme Minister Alexandre de Moraes opened a criminal investigation of the Google (and Telegram) directors, on the grounds of \u0026ldquo;abusive campaign against the PL 2630/2020\u0026rdquo;. I don\u0026rsquo;t think that constitutes a crime, but the Supreme Minister does. For my point of view, it\u0026rsquo;s just an opinion, and it\u0026rsquo;s not a crime to have an opinion. Despite not liking Google, I think that it is a valid participant in the discussion of the law. Such discussions should happen in a healthy democracy.\nOf course, Google used its power to promote its opinion, but again that\u0026rsquo;s not a crime. Let\u0026rsquo;s do a thought experiment, let\u0026rsquo;s go back to 1850s USA. Dred Scott v. Sandford (1857), according to Wikipedia, was a \u0026ldquo;landmark decision of the United States Supreme Court that held the U.S. Constitution did not extend American citizenship to people of black African descent, and thus they could not enjoy the rights and privileges the Constitution conferred upon American citizens\u0026rdquo;. That\u0026rsquo;s pretty bad decision, right? Anyone in their right mind today would agree that violates human rights. Now, imagine that one of the most powerful companies at that time, Pacific Main Steamship Company, would use its power to promote the abolitionist movement. Specifically, it would give a pamphlet to every passenger that boarded its ships with the opinion that the American citizenship should be extended to people of \u0026ldquo;black African descent\u0026rdquo;. What would happen to the company? Would it be a crime to promote the abolitionist movement? Would the Supreme Court open a criminal investigation against the company and its directors? Think about this for a moment\u0026hellip;\nThe problem with censorship is that it\u0026rsquo;s very easy to abuse. I honestly don\u0026rsquo;t care about Google, or the PL 2630/2020. I know that the internet is decentralized, and content will always find its way and be available somewhere. There\u0026rsquo;s no way to stop it. But, I am gravely concerned with the precedents that the Brazilian government and Brazilian Supreme Court are setting when they censor opinions that they don\u0026rsquo;t like.\nLicense This post is licensed under Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International.\n","permalink":"https://realeinherjar.github.io/2023-08-19-censorship/","summary":"In Brazil, there\u0026rsquo;s a new law that is being proposed that will allow the government to censor social media posts. The law is called PL 2630/2020 and it\u0026rsquo;s being called the \u0026ldquo;Fake News Law\u0026rdquo;. It\u0026rsquo;s a very dangerous law that will allow the government to censor any post that it deems \u0026ldquo;fake news\u0026rdquo;. The problem is that the definition of \u0026ldquo;fake news\u0026rdquo; is very broad and can be used to censor any post that the government doesn\u0026rsquo;t like.","title":"On Censorship"},{"content":"This is a nym. I\u0026rsquo;m a recovering academic in my mid-30s. I hold a PhD and was a faculty member in a computer science department for 5 years. My background is in computational statistics and machine learning. I\u0026rsquo;ve supervised a couple of PhD students, and taught undergraduate and graduate courses in machine learning, deep learning, statistics, data science, and programming.\nI am fluent in Rust, Python, and C/C++. Due to my data science background, I also know R, SQL, and Julia. I am comfortable in navigating almost any codebase, disrespecting the programming language, and also in learning new languages and frameworks. My workflow, both personal and professional, is heavily based on Git and GitHub: PRs, issues, code reviews, CI/CD, project management, releases, etc. I have solid experience with Docker, Linux and Nix environments, and cloud computing. As a computational scientist, I am familiar with cryptography, and I have advanced math skills.\nDuring the day, I work full-time as a senior scientific software engineer at a software company. I co-lead a team of around 20 developers. My role is to review PRs, develop documentation, triage issues, and mentor junior developers. I also take on strategic development tasks planning, such as new features and releases.\nI have experience in leading teams and projects, interfacing with clients, and top management. As volunteer work, I have been a mentor for the Google Summer of Code program, and board member of a non-profit open-source organization that has NumFOCUS as a fiscal sponsor. In fact, I was the NumFOCUS financial liaison for that organization.\nEverything shifted when I encountered Bitcoin. I had arrived seeking a revolution, and I was truly captivated by the technology and protocol behind it.\nIn my free time, I follow the technical developments of Bitcoin, and also contribute to the ecosystem. I have a deep understanding of the Bitcoin protocol, lightning network, and the ecosystem in general. I also have a good understanding of the economics and game theory behind Bitcoin. I have knowledge about the codebases of open-source Bitcoin projects, mainly in Rust and C/C++.\nCheck my portfolio at GitHub for some of my projects. If you want a full CV, please contact me.\n","permalink":"https://realeinherjar.github.io/about/","summary":"This is a nym. I\u0026rsquo;m a recovering academic in my mid-30s. I hold a PhD and was a faculty member in a computer science department for 5 years. My background is in computational statistics and machine learning. I\u0026rsquo;ve supervised a couple of PhD students, and taught undergraduate and graduate courses in machine learning, deep learning, statistics, data science, and programming.\nI am fluent in Rust, Python, and C/C++. Due to my data science background, I also know R, SQL, and Julia.","title":"About"}]