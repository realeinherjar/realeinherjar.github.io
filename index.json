[{"content":"Why Privacy is Important? First, the definition of privacy according to the Cyphepunk Manifesto:\nPrivacy is necessary for an open society in the electronic age. Privacy is not secrecy. A private matter is something one doesn\u0026rsquo;t want the whole world to know, but a secret matter is something one doesn\u0026rsquo;t want anybody to know. Privacy is the power to selectively reveal oneself to the world.\nPrivacy is not just a personal preference but a fundamental right that is essential for protecting individual freedom, democracy, and the integrity of the digital world.\nPrivacy is also important because it allows individuals to express themselves freely without fear of reprisal. In a world where dissent is not tolerated, privacy allows people to speak out against the system without putting themselves in danger. It also allows people to explore their identities and beliefs without fear of judgment or persecution.\nFurthermore, privacy is essential for maintaining trust in relationships. In a world where everything is monitored and recorded, privacy is the only way to maintain intimacy and trust in personal relationships. Without privacy, relationships become transactional and superficial, devoid of the emotional connection that makes them meaningful.\nFinally, privacy is important for democracy. In a world where information is power, privacy ensures that everyone has access to the same information and is not unfairly disadvantaged. Without privacy, those in power can use their access to information to manipulate elections and undermine democracy.\nHow to migrate to a secure and private tools? NOTE: most of the recommendations here are in sync with the recommendations of privacyguides.org. I highly recommend their recommendations and guides.\nGet a Linux-capable notebook. Framework Laptops seems a nice addition with the user customization, upgradable and repairable. System76 hardware is also great with the open firmware, native coreboot and Intel\u0026rsquo;s Management Engine (IME) (avoid AMD machines since System76 cannot disable the ADM Platform Security Processor - PSP.) Also don\u0026rsquo;t forget to disable Intel\u0026rsquo;s ME with corna/me_cleaner. Get a Google Pixel smartphone. Install GrapheneOS. It is more secure than any Linux distribution. GrapheneOS should be your default high-secure medium, and Linux coming close as a second-best alternative.\nLinux/Qubes Linux is not a silver bullet.\nLinux is not safe.\nThat\u0026rsquo;s why I recommend Qubes OS.\nQubes OS This is the most secure persistent-storage OS. It uses level-1 virtualization to compartmentalize everything. There\u0026rsquo;s a great guide on how to install Qubes at anonymousplanet.org. For the extra paranoid there\u0026rsquo;s a detached encrypted boot and header guide. By using a detached header the encrypted blockdevice itself only carries encrypted data, which gives deniable encryption as long as the existence of a header is unknown to the attackers. Deniable encryption describes encryption techniques where the existence of an encrypted file or message is deniable in the sense that an adversary cannot prove that the plaintext data exists\nSome suggestions on how to run your Qubes OS:\nDisable Bluetooth. Disable, preferably in BIOS, bluetooth, fingerprint scanner, and any other useless stuff that enhances your attack surface.\nAlternatively, you can start dom0 and edit the /etc/modprobe.d/blacklist-bluetooth.conf:\nblacklist bnep blacklist bluetooth blacklist btusb Activate Anti Evil Maid, if your hardware supports it (TPM 1.2).\nUse Btrfs filesystem. The default Qubes filesystem is LVM-enabled ext4. If you have very large (in space) VMs you might experience issues. dom0 really hogs up the cpu after shutdown of huge app VMs. Btrfs solves this issue.\nSplit Everything:\nSplit GPG: Follow the instructions at qubes-os.org/doc/split-gpg Split SSH: Follow the instructions at Qubes-Community Docs U2F Proxy: Follow the instructions at qubes-os.org/doc/u2f-proxy Linux Don\u0026rsquo;t forget to check my NixOS paranoid build with root on tmpfs. This means that everything outside some directories of /etc and /home will be wiped out.\nKnowing that if you still want to use Linux, go ahead. Linux is much better than Windows. There are some nice information on how to harden your Linux system (additional resource here) If you want the maximum available privacy and security in your Linux distribution:\nUse Private and Secure Distributions! Avoid telemetry that often comes with proprietary operating systems. Maintain software freedom. Encrypt your system (ALWAYS).\nUse Secure Boot. Secure Boot can be used to secure the boot process by preventing the loading of unsigned UEFI drivers or boot loaders. This is specially useful against evil maid attacks.\nDon\u0026rsquo;t use Swap partition. Consider using ZRAM to avoid potential security issues with sensitive data being pushed to swap space.\nUse Wayland. It is more secure than Xorg, because it is developed with security in mind, supporting GUI isolation, allowing none of the windows to record screen, log and inject inputs in other window.\nUse Network Manager MAC randomization. Create a file /etc/NetworkManager/conf.d/wifi_rand_mac.conf:\n[device-mac-randomization] # \u0026#34;yes\u0026#34; is already the default for scanning wifi.scan-rand-mac-address=yes [connection-mac-randomization] # Randomize MAC for every ethernet connection ethernet.cloned-mac-address=random # Generate a randomized value upon each connection wifi.cloned-mac-address=random # Generate a random MAC for each WiFi and associate the two permanently #wifi.cloned-mac-address=stable Use a /etc/hosts file to block spyware, adware and malware system-wide. I recommend StevenBlack/hosts.\nIf you need VPN, use mullvad.\nUse a custom DNS Resolver. I sometimes use mullvad\u0026rsquo;s adblock DNS over TLS: adblock.doh.mullvad.net. You can find the list at mullvad/dns-blocklists.\nUse a firewall. You could also set your default firewall zone to drop packets:\nfirewall-cmd --set-default-zone=drop; firewall-cmd --add-protocol=ipv6-icmp --permanent; firewall-cmd --add-service=dhcpv6-client --permanent; Use Full Disk Encryption. Also make sure that you PBKDF is argon2i as detailed below.\nSecure your bootloader (generally GRUB) with a password.\nNever leave your master GPG key in your computer. The files in our home directory are not as well protected as we like to think. They can be leaked or stolen. Remove your master key from your home directory and store it on offline storage. Use subkeys. Follow the Linux Kernel Maintainer PGP Guide, and also the Riseup OpenPGP Best Practices (which are at Jacob Appelbaum’s duraconf “collection of hardened configuration files”). This means getting a PGP Smart card. Yubikey are prevalent all over the world, and you can have easy access to buying them. Use it.\nIf you are accessing through SSH, turn on a stronger authentication based on public key encryption.\nSandbox almost everything that you don\u0026rsquo;t trust. If you need to use proprietary crap, run in flatpak and use flatseal for a simple GUI to sandbox permissions.\nDisable Bluetooth: You can disable at OS level with systemd and at kernel level with modprobe.\nsystemd:\nsystemctl stop bluetooth.service systemctl disable bluetooth.service systemctl mask bluetooth.service modprobe: You may instead want to tell your kernel not to load the driver for these wireless devices at all. This means your OS and kernel won\u0026rsquo;t know how to interface with these devices, and they will remain unpowered.\nFirst, check what kernel modules are currently loaded with lsmod:\ncat@rt~ $ sudo lsmod Module Size Used by btusb 57344 0 btrtl 20480 1 btusb btbcm 16384 1 btusb btintel 28672 1 btusb bluetooth 577536 5 btrtl,btintel,btbcm,btusb ecdh_generic 16384 1 bluetooth ecc 32768 1 ecdh_generic [...] We can see on my machine there are several bluetooth drivers running. btusb, btrtl, btbcm, btintel, and bluetooth.\nbtusb is the generic driver that each of the other modules relies on. It should be sufficient just to unload btusb, but since I know the others aren\u0026rsquo;t going to be used either, I like to be thorough and make sure none of these drivers load.\nWe will do this with modprobe by telling its configuration file to ignore these kernel modules with the blacklist command. This will go in /etc/modprobe.d/blacklist.conf:\nblacklist btusb blacklist btrtl blacklist btbcm blacklist btintel blacklist bluetooth To avoid GNOME crashes install the gnome-shell-extension-remove-bluetooth-icon package.\nOpen Source Alternatives Here are some of my suggestions for you to migrate your proprietary tools to open source tools:\nMessaging: Signal (or the FOSS fork Molly), SimpleX, Element (Matrix client), Session, Briar and Cwtch. Email: ProtonMail or Tutanota with NeoMutt or aerc; depending on your threat model you might want to self-host your mail server, try LukeSmithxyz/emailwiz. You can also try GUI interfaces like Thunderbird, or the fine-tuned fork Betterbird. Conferencing: Jami and Jitsi. Text Editing: Helix/NeoVim/Vim/VSCodium for Markdown, text and LaTeX, LibreOffice and Pandoc. PDF Documents: Zathura. (available in every Linux major distro), Sioyek (supports highlighting and other fancy nice stuff), and Evince (which comes by default in GNOME). Ebooks: Calibre and Foliate. Web Browser: hardened Firefox, Mullvad Browser, and ungoogled-chromium if you need a Chromium-based browser. You can get it using flatpak in flathub. Search: searX. You can use the Random searX Redirector, that will forward your search to one of the 75 random volunteer-run public searX servers to thwart mass surveillance. News: You can get RSS feeds with NewsFlash (GUI) or newsboat (CLI). Password Manager: always go OFFLINE either KeePassXC or pass. Cloud: backup stuff with rsync and clonezilla; always encrypt stuff with LUKS, VeraCrypt (VeraCrypt has plausible deniability), or Cryptomator. File Sharing: onionshare, securedrop and croc. Image Editing: Inkscape for vector graphics, or GIMP for image editing. Video: OBS Studio for video capturing, ffmpeg for CLI video editing, or Shotcut for GUI video editing. Music Player: Cmus for a CLI app, or Lollypop for a GUI app. Spotify: DON\u0026rsquo;T! Use mp3 files (or even better opus files), but if you want, SpotiFlyer, SpotDL, and spotify-adblock. There\u0026rsquo;s also Spotube. YouTube: FreeTube, NewPipe, youtube-dl(deprecated), yt-dlp and ytfzf. Netflix etc: Torrents (transmission) with vlc and mpv (also try peerflix or webtorrent-cli). IDE: Helix/NeoVim with LSP, or VSCodium. Reference Manager: Zotero (GUI) or papis (CLI). GrapheneOS GrapheneOS is a privacy and security focused mobile OS with Android app compatibility developed as a non-profit open source project.\nGrapheneOS improves the privacy and security of the OS from the bottom up. It deploys technologies to mitigate whole classes of vulnerabilities and make exploiting the most common sources of vulnerabilities substantially more difficult. It improves the security of both the OS and the apps running on it. The app sandbox and other security boundaries are fortified. GrapheneOS tries to avoid impacting the user experience with the privacy and security features. Ideally, the features can be designed so that they\u0026rsquo;re always enabled with no impact on the user experience and no additional complexity like configuration options. It\u0026rsquo;s not always feasible, and GrapheneOS does add various toggles for features like the Network permission, Sensors permission, restrictions when the device is locked (USB peripherals, camera, quick tiles), etc. along with more complex user-facing privacy and security features with their own UX.\nGrapheneOS is recommended as one of the most secure and private option on Android.\nHow to install GrapheneOS has two officially supported installation methods. You can either use the WebUSB-based installed recommended for most users or the command-line installation guide aimed at more technical users.\nA note regarding battery life You don\u0026rsquo;t need to do battery optimizations. Modern phones with built-in batteries have their own computers onboard the computer, which can take into account the number of charge cycles the battery has undergone and automatically reallocate overprovisioning as required to ensure they automatically and transparently set the charging and cutoff thresholds to give the best health of the battery over time. This makes the old school of thought of charging to 80% obsolete.\nTake a look at the GrapheneOS battery recommendations\nApps It already comes with a nice browser (Vanadium) and a good Camera App.\nYou can also sandbox Google Play apps in GrapheneOS\nThe vital apps to have:\nA good list can be found at brainfucksec.github.io.\nF-Droid. Aurora Store for Google Play Apps: Banking Apps (You\u0026rsquo;ll probably need to sandbox them in a separated user). Also for those nasty banking apps you can check one of the GrapheneOS\u0026rsquo; core dev banking apps compatibility page. Uber (You don\u0026rsquo;t need the app, m.uber.com in a mobile browser works great) Emails with FairEmail It supports PGP sign/encrypt. You will need to use the GitHub version to support Gmail. Privacy Browser with Bromite (additionally check brainfucksec.github.io for Bromite hardening tips) Calendar with DAVx5: Google Passwords and TOPT with KeePassDX. GPG Keys with OpenKeyChain. If you need VPN use mullvad. Email alises with SimpleLogin. YouTube with NewPipe. Spotify with SpotiFlyer. Note that you can also download Spotify playlists with SpotDL. There\u0026rsquo;s an open source frontend for Spotify called Spotube. There\u0026rsquo;s an open source frontend for YouTube Music called ViMusic. Videos with VLC or mpv. RSS Feeds with Feeder. PDF Scanner with Open Note Scanner. TorBrowser with Guardian Project\u0026rsquo;s F-Droid Repository. Navigation with OsmAnd+ and Organic Maps. Messaging with Signal, Session, and SimpleX. Removing EXIF and compressing Images with ImagePipe, ObscuraCam or Scrambled Exif. Weather with Forecastie. Online Meetings with Jami. PDF and ebooks with Librera Reader. Torrents and General downloads with Aria2App LibreTorrent. FTPClient. Control your Smartphone Internet with NetGuard. You don\u0026rsquo;t need to install this. The most effective way to block network access is to revoke the network permission from the app like GrapheneOS allows you to do. Block Adware, Spyware and Malware with AdAway (it uses StevenBlack/hosts under the hood). Block unwanted calls with Yet Another Call Blocker. Simple Mobile Tools. What about VPN? If you are using a VPN, check if you are leaking your DNS with https://dnsleaktest.com/.\nVPNs are no silver bullet. Do not trust all the VPN ads. They are made for you to buy stuff. You are just transferring the trust from your ISP (Internet Service Provider) to your VPN service provider.\nBut they are useful, specifically for:\nYou need to have a specific geolocated IP address. You need to hide some stuff from your ISP (this is most important if you are a person of interest in a f*****-up country). You need to increase your anonymity set, i.e. have a plausible deniability that you might or might not be someone. This is recommended when downloading and seeding torrents. Suggestions:\nIf you want a simple solution just use Mullvad. They are a notorious private VPN service that claims to do no logging and also no personal information. Also, Mullvad is located in Sweden which has very good privacy-respecting laws. Buy a subscription using cryptocurrency with obfuscation techniques, such as Monero or coinjoined Bitcoin. If you want to do it yourself see this video guide by mental outlaw. It teaches you how to make your own VPN with OpenBSD (a VERY secure Unix-based OS) and WireGuard. For the VPS hosting, use either 1984 or orange. Both are located in Iceland which has very good privacy-respecting laws. You can also just use Tor to obfuscate you traffic. If you need to use a VPN but somehow either obfuscate even further or bypass some restriction or firewall block, use Shadowsocks.\nBrowser Extensions Remember that the browser is pretty much a glorified remote code execution machine. That pretty much means a privacy and security nightmare. So you need to have sane defaults. The idea here is to block everything (opt-out) by default and whitelist (opt-in) as necessary.\nuBlock Origin, the only one you need! I recommend using the Hard Mode, with disabled JavaScript and whitelist sites as necessary.\nEmail Aliasing It is one of the most powerful privacy devices that you have. I use simplelogin.\nFile Sharing Send is a fork from the discontinued project Firefox Send. It provides end-to-end encryption with optional password. You can run your own instance. The author of this fork also provides a command-line client to send files from your terminal to the Firefox Send instances.\nMany instances are available, with different characteristics, such as more storage or longer available time.\nBackups It is important to backup your data. First, a note about cloud solutions. Stay away! Most cloud solutions will scan your data or keep copies of your data for years after deletion. If you want to backup to the cloud use an encrypted cloud solution, such as Proton Drive or Cryptee. Both have good cryptographic standards and zero-knowledge encryption, but Cryptee has amazing features like no-KYC and plausible deniability, apart from being hosted on Estonia (privacy-respecting country).\nSaid that, I highly advocate you do offline encrypted backups. You can use open source and widely-available tools such as GnuPG/VeraCrypt and rsync. Or you can use automated open source tools (that might not be widely-available, i.e. you would need to install manually) such as rbackup. rbackup is a simple (with an easy-to-read codebase) shell script for making backup of your Linux system with rsync. Uses tar and gzip for compression and GnuPG for encryption.\nAlternative Frontends There are several FOSS alternative frontends such as Nitter, Libreddit, Invidious, Wikiless, Bibliogram, and ProxiTok. Use them whenever possible for a privacy-oriented consumption of those services.\nFarside is redirecting service for FOSS alternative frontends.\nFarside provides links that automatically redirect to working instances of privacy-oriented alternative frontends, such as Nitter, Libreddit, etc. This allows for users to have more reliable access to the available public instances for a particular service, while also helping to distribute traffic more evenly across all instances and avoid performance bottlenecks and rate-limiting.\nFarside\u0026rsquo;s links work with the following structure: farside.link/\u0026lt;service\u0026gt;/\u0026lt;path\u0026gt;. Examples:\nhttps://farside.link/https://www.youtube.com/watch?v=dQw4w9WgXcQ will redirect to a Piped or Invidious instance. https://farside.link/reddit.com/r/popular will redirect to a Libreddit or Teddit instance. Password Policy Always generate strong passwords. That means at least 200 bits of entropy for quantum secure. You can easily generate this with 15 words from the EFF wordlist.\nNOTE: KeepassXC comes already with the EFF wordlist.\nCryptography Encryption of data is the only way to control who can access it. Always encrypt sensitive data!\nA note about Quantum Computers Quantum computers are a threat to modern cryptographic algorithms and softwares. Grover’s algorithm shows that a quantum computer speeds up these attacks to effectively halve the key length. This would mean that a 256-bit key is as strong against a quantum computer as a 128-bit key is against a conventional computer; both are secure for the foreseeable future.\nNOTE: Passwords for LUKS FDE are secured using a key-stretching implementation known as a Password-Based Key Derivation Function (PBKDF). The older HMAC-SHA* algorithm is less effective against parallelization by GPUs and ASICs \u0026ndash; the same weaknesses suffered by Bitcoin against dedicated mining hardware. Argon2id is the winner of the Password Hashing Competition and the state-of-the-art hashing algorithm of choice when protecting encryption keys. Its memory-hard properties introduce a large penalty for brute-search on general computers and even more so on GPUs and ASICs. Current versions of LUKS uses argon2i as the PBKDF. To check this run sudo cryptsetup luksDump /dev/\u0026lt;luks-device\u0026gt; | grep -E 'Version|cipher|key|PBKDF|Hash'.\nVeraCrypt I recommend VeraCrypt. It is open source, works on Windows/Mac/Linux, You can encrypt a file, a partition, or a whole storage device.\nIn case an adversary forces you to reveal your password, VeraCrypt provides and supports plausible deniability. You can create Hidden Volumes. It may happen that you are forced by somebody to reveal the password to an encrypted volume. There are many situations where you cannot refuse to reveal the password (for example, due to extortion). Using a so-called hidden volume allows you to solve such situations without revealing the password to your volume. If you type your default password you unlock the \u0026ldquo;standard volume\u0026rdquo;, and if you type another password you unlock the \u0026ldquo;hidden volume\u0026rdquo;. The hidden volume is where you would put all of your sensitive information.\nSteganography Steganography is the practice of concealing a message within another message or a physical object. In computing/electronic contexts, a computer file, message, image, or video is concealed within another file, message, image, or video. This is a very interesting technique where you can easily hide sensitive data into an innocent picture, text file or video.\nYou have a couple of options for steganography software:\nsteghide: CLI available in almost every distro (Fedora, Debian, etc.) written in C++. tomb: a minimalist and easy to use CLI written as a simple shell script (Zsh) using standard filesystem tools (GNU) and the cryptographic API of the Linux kernel (cryptsetup and LUKS). Financial Sovereignty with Bitcoin If you don\u0026rsquo;t know the case for Bitcoin, check bitcoiner.guide. For a quick intro on how to use it privately and safely check bitcoin-intro.com.\nThis list is always evolving. Check kycnot.me.\nRegarding Bitcoin, you can:\nUse a prepaid Visa card with Moon. Use a prepaid gift card with CoinCards. Swap Bitcoin for cash in Bitcoins ATM. Swap cash for Bitcoin using Azte.co. They are accepted in a lot of countries. In Brazil, they are accepted in every lotérica. All you need is a CPF number. There\u0026rsquo;s a 7% flat rate over the current exchange rate for BTC purchases. You can withdraw to on-chain (USD 2.5 fee) or lightning (free). P2P decentralized exchange of crypto with bisq, robosats, localmonero or agoradesk. Swap Bitcoin for Monero with atomic swaps, fixed float, sideshift or majesticbank; see best rates at orangefren. Wallets In case of losing your wallet, you are pretty much f***ed. You might try your luck, in that case check walletsrecovery.org.\nWe have software wallets and hardware wallets.\nSoftware wallets put your seed into the same device they are running. So, if your device is compromised, so potentally is your seed. Your precious cryptocurrencies could be in danger.\nHardware wallets are dedicated hardware to hold, with tons of security features, your private keys. So, if your device is compromised, your keys are probably safe from danger. Or at least, way safer than if it were a software wallet.\nIf you are not running your own node (some reasons why you should do it here), you should either use a trusted VPN (which none are) or the Tor network to connect to a trusted node (which again none are).\nHardware Wallets The only one I recommend are the ones from coinkite which are Bitcoin-only. They are very well-designed and almost impossible to breach.\nThere are two options:\nHigher-end option: COLDCARD. Cheap option: TAPSIGNER. Software Wallets The best software wallet alternatives are to use Samourai and Monerujo, for Bitcoin and Monero respectively, in your GrapheneOS phone. But you can also use any of these:\nBitcoin: Sparrow (Linux/MacOS/Windows), Electrum (Linux/MacOS/Windows/Android/iOS), BlueWallet (F-Droid/iOS), Nunchuk (Android/iOS), Samourai (Android/F-droid), or Mutiny (Android/iOS but there\u0026rsquo;s a PWA that runs in the browser). Monero: Monero Wallet CLI/GUI (Linux/MacOS/Windows), Cake (Android, iOS), Monerujo (F-Droid) or MyMonero (Android/iOS). Honorable Mentions If you want a live USB secure OS, use TailOS. It will load to RAM and will leave no trace in the host computer. It also routes everything through Tor. There\u0026rsquo;s a guide on how to use it in anonymousplanet.org. OpenBSD is also a good alternative, but is is still very restrictive. It is a solid option for servers. Check here for a lot of tutorials for daily usage. If you need an anonymous non-KYC eSIM card, use silent.link. If you need a SMS activation code, use sms4sats, juicysms, or LNSMS License This post is licensed under Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International.\n","permalink":"https://realeinherjar.github.io/privacy/","summary":"Why Privacy is Important? First, the definition of privacy according to the Cyphepunk Manifesto:\nPrivacy is necessary for an open society in the electronic age. Privacy is not secrecy. A private matter is something one doesn\u0026rsquo;t want the whole world to know, but a secret matter is something one doesn\u0026rsquo;t want anybody to know. Privacy is the power to selectively reveal oneself to the world.\nPrivacy is not just a personal preference but a fundamental right that is essential for protecting individual freedom, democracy, and the integrity of the digital world.","title":"Privacy Basics"},{"content":" Warning: This post has KaTeX enabled, so if you want to view the rendered math formulas, you\u0026rsquo;ll have to unfortunately enable JavaScript.\nNote: All elliptic curve images are made using $\\LaTeX$ and TikZ. The source code is freely available at GitHub.\nWhat the hell is an Elliptic Curve? In this post, I\u0026rsquo;ll try to explain what an elliptic curve is, and why it\u0026rsquo;s so important in cryptography. If you ever used an end-to-end encrypted messaging app, or hold Bitcoin (or any other shitcoin, though I don\u0026rsquo;t recommend it), you\u0026rsquo;ve probably heard of elliptic curves. It is important to know that elliptic curves are not only used in cryptography, but also in many other fields of mathematics, such as number theory, algebraic geometry, and topology.\nMy main argument is that elliptic curves are not that hard to understand. Additionally, since encryption is ubiquitous in our daily lives, understanding them is important to be a well-informed citizen. I\u0026rsquo;ll try to explain the concepts in a simple way, but I\u0026rsquo;ll assume you have some basic knowledge of algebra and math symbols. Finally, I\u0026rsquo;ll use the standard math notation, so that when you read about elliptic curves in other places, you\u0026rsquo;ll be able to make connections more easily.\nWhat is an Elliptic Curve? An elliptic curve is a curve defined by the equation\n$$y^2 = x^3 + ax + b$$\nwhere $a$ and $b$ are real numbers.\nHere\u0026rsquo;s an example of an elliptic curve, if you set $a = 0$ and $b = 7$:\n$$y^2 = x^3 + 7$$\nThis is secp256k1, the notorious elliptic curve used in Bitcoin.\nsecp256k1 curve Elliptic curves have some properties that make them interesting. For example, they are symmetric with respect to the $x$-axis. This means that if $(x, y)$ is a point in the curve, then $(x, -y)$ is also a point in the curve1. This is because $(-y)^2 = y^2$.\nAdding Points in an Elliptic Curve If you have two points $P$ and $P^\\prime$ in the curve, then the line that passes through them will intersect the curve in a third point2 $P^{\\prime\\prime}$:\nTwo Points in an Elliptic Curve If you reflect $P^{\\prime\\prime}$ with respect to the $x$-axis, you\u0026rsquo;ll get a new point:\nAdding Two Points in an Elliptic Curve This is how you add two points in an elliptic curve. Note that the result of adding two points is also a point in the curve. This property is called closure. For any two points $P$ and $P^\\prime$ in the curve, $P + P^\\prime$ is also a point in the curve.\nThere are two cases where the line doesn\u0026rsquo;t intersect the curve in a third point. The first one is when $P = P^\\prime$.\nAdding a Point to Itself in an Elliptic Curve Then we have a tangent line. In this case we take derivatives on both sides:\n$$\\begin{aligned} y^2 \u0026amp;= x^3 + ax + b \\\\ 2y \\frac{dy}{dx} \u0026amp;= 3x^2 + a \\\\ \\frac{dy}{dx} \u0026amp;= \\frac{3x^2 + a}{2y} \\end{aligned}$$\nHence, $2*P = (x, y)$ where $x = \\left( \\frac{3x^2 + a}{2y} \\right) - 2x$, and $y = \\left( \\frac{3x^2 + a}{2y} \\right) (x - x) - y$.\nThe other is when $P^\\prime$ is the reflection of $P$ with respect to the $x$-axis.\nAdding a Point to Its Reflection in an Elliptic Curve Then we have a vertical line. In this case we define $P + P^\\prime = \\mathcal{O}$, where $\\mathcal{O}$ is the point at infinity.\nPoint Addition Properties Point addition satisfies some properties:\nIdentity: $P + \\mathcal{O} = \\mathcal{O} + P = P$ Commutativity: $P + P^\\prime = P^\\prime + P$ Associativity: $(P + P^\\prime) + P^{\\prime\\prime} = P + (P^\\prime + P^{\\prime\\prime})$ Inverse Element: $P + (-P) = \\mathcal{O}$ Closure: $P + P^\\prime$ is a point in the curve Hey this is very similar to addition of integers! But using points instead of integers.\nIn fact, we can define multiplication of a point $P$ by an integer $n$ as:\n$$\\underbrace{P + P + \\cdots + P}_{n \\text{ times}}$$\nAbelian Groups The set of points in an elliptic curve with the point at infinity $\\mathcal{O}$ along with a binary operation $+$ that satisfies the properties above is called an Abelian group. In honor of Niels Henrik Abel, an Abelian group is a set with a binary operation that satisfies all the properties above.\nAnother example of an Abelian group is the set of integers $\\mathbb{Z}$ with addition $+$. And another one is the set of natural numbers $\\mathbb{N}$ with multiplication $\\times$.\nFields There\u0026rsquo;s one more concept that we need to learn before we can talk about cryptography. It\u0026rsquo;s called a finite field. But before we talk about finite fields, we need to first define a field. Fields are sets with two binary operations, called addition $+$ and multiplication $\\times$. We write\n$$F = (F, +, \\times)$$\nto denote a field, where $F$ is the set, $+$ is the addition operation, and $\\times$ is the multiplication operation.\nAddition and multiplication behave similar to the addition and multiplication of real numbers. For example, addition is commutative and associative\n$$a + b = b + a,$$\nand multiplication is distributive\n$$a \\times (b + c) = a \\times b + a \\times c.$$\nAlso, there are two special elements in the field, called the additive identity $-a$ and the multiplicative identity $a^{-1}$, such that\n$$a + (-a) = I,$$\nand\n$$a \\times a^{-1} = I,$$\nwhere $I$ is the identity element.\nNote that this allows us to define subtraction\n$$a - b = a + (-b),$$\nand division\n$$a \\div b = a \\times b^{-1}.$$\nFinite Fields Now we are ready for finite fields. A finite field, also called a Galois field (in honor of Évariste Galois), is a field with a finite number of elements. As with any field, a finite field is a set on which the operations of multiplication, addition, subtraction and division are defined and satisfy the rules above for fields.\nFinite fields is a very rich topic in mathematics, and there are many ways to construct them. The easiest way to construct a finite field is to take the integers modulo a prime number $p$. For example $\\mathbb{Z}_4$ is a finite field with 4 elements:\n$$\\mathbb{Z}_4 = \\lbrace 0, 1, 2, 3 \\rbrace.$$\nIn general, $\\mathbb{Z}_n$ is a finite field with $n$ elements:\n$$\\mathbb{Z}_n = \\lbrace 0, 1, 2, \\ldots, n - 1 \\rbrace.$$\nThe number of elements in a finite field is called the order of the field. The order of a finite field is always a prime number $p$. The $\\mathbb{Z}_4$ example above is a finite field of order 2. To see that notice that $4$ is a composite number,\n$$4 = 2 \\times 2.$$\nAnd we can write $\\mathbb{Z}_4$ as\n$$\\mathbb{Z}_4 = 2 \\times \\mathbb{Z}_2.$$\nThis means that every element in $a \\in \\mathbb{Z}_4$ can be written as\n$$a = 2 \\times b,$$\nwhere $b$ is an element in $\\mathbb{Z}_2$.\nHence, not every element of $\\mathbb{Z}_4$ is unique, and they are equivalent to the elements in $\\mathbb{Z}_2$.\nIn general if $n$ is a composite number, then $\\mathbb{Z}_n$ is not a finite field. However, if $n = r \\times s$ where $r$ and $s$ are prime numbers, and $r \u0026lt; s$, then $\\mathbb{Z}_n$ is a finite field of order $r$.\nOperations in Finite Fields Addition in finite fields is defined as the remainder of the sum of two elements modulo the order of the field.\nFor example, in $\\mathbb{Z}_3$,\n$$1 + 2 = 3 \\mod 3 = 0.$$\nWe can also define subtraction in finite fields as the remainder of the difference of two elements modulo the order of the field.\nFor example, in $\\mathbb{Z}_3$,\n$$1 - 2 = -1 \\mod 3 = 2.$$\nMultiplication in finite fields can be written as multiple additions. For example, in $\\mathbb{Z}_3$,\n$$2 \\times 2 = 2 + 2 = 4 \\mod 3 = 1.$$\nExponentiation in finite fields can be written as multiple multiplications. For example, in $\\mathbb{Z}_3$,\n$$2^2 = 2 \\times 2 = 4 \\mod 3 = 1.$$\nAs you can see addition, subtraction, and multiplication becomes linear operations. This is very trivial for any finite field.\nHowever, for division we are pretty much screwed. It is really hard to find the multiplicative inverse of an element in a finite field. For example, suppose that we have numbers $a,b$ in a very large finite field $\\mathbb{Z}_p$, such that\n$$c = a \\times b \\mod p.$$\nThen we can write division as\n$$a = c \\div b = c \\times b^{-1} \\mod p.$$\nNow we need to find $b^{-1}$, which is the multiplicative inverse of $b$. This is called the discrete logarithm problem. Because we need to find $b^{-1}$ such that\n$$b^{-1} = \\log_b c \\mod p.$$\nSince this number is a discrete number and not a real number, that\u0026rsquo;s why it\u0026rsquo;s called the discrete logarithm problem.\nGood luck my friend, no efficient method is known for computing them in general. You can try brute force, but that\u0026rsquo;s not efficient.\nWhy the Discrete Logarithm Problem is Hard as Fuck To get a feeling why the discrete logarithm problem is difficult, let\u0026rsquo;s add one more concept to our bag of knowledge. Every finite field has generators, also known as primitive roots, which is also a member of the group, such that applying multiplication to this one single element makes possible to generate the whole finite field.\nLet\u0026rsquo;s illustrate this with an example. Below we have a table of all the results of the following operation\n$$b^x \\mod 7$$\nfor every possible value of $x$. As you\u0026rsquo;ve guessed right this is the $\\mathbb{Z}_7$ finite field.\n$b$ $b^1 \\mod 7$ $b^2 \\mod 7$ $b^3 \\mod 7$ $b^4 \\mod 7$ $b^5 \\mod 7$ $b^6 \\mod 7$ $1$ $1$ $1$ $1$ $1$ $1$ $1$ $2$ $2$ $4$ $1$ $2$ $4$ $1$ $3$ $3$ $2$ $6$ $4$ $5$ $1$ $4$ $4$ $2$ $1$ $4$ $2$ $1$ $5$ $5$ $4$ $6$ $2$ $3$ $1$ $6$ $6$ $1$ $6$ $1$ $1$ $1$ You see that something interesting is happening here. For specific values of $b$, such as $b = 3$, and $b = 5$, we are able to generate the whole finite field. Hence, say that $3$ and $5$ are generators or primitive roots of $\\mathbb{Z}_7$.\nNow suppose I ask you to find $x$ in the following equation\n$$3^x \\mod p = 11$$\nwhere $p$ is a very large prime number. Then you don\u0026rsquo;t have any other option than brute forcing it. You\u0026rsquo;ll need to try each exponent $x \\in \\mathbb{Z}_p$ until you find the one that satisfies the equation.\nNotice that this operation is very asymmetric. It is very easy to compute $3^x \\mod p$ for any $x$, but it is very hard to find $x$ given $3^x \\mod p$.\nBringing it All Together Now we are ready to talk about elliptic curve cryptography. Elliptic curve cryptography is a public-key encryption technique based on elliptic curves. It is used to create public and private keys for asymmetric cryptography.\nYour private key is a random number $k$. Your public key is the point $kG$ in the elliptic curve, where $G$ is a point and a generator of the elliptic curve. We know that $kG$ is a point in the elliptic curve, because elliptic curves are Abelian groups, having the closure property, then\n$$kG = \\underbrace{G + G + \\cdots + G}_{k \\text{ times}}$$\nis also a point in the elliptic curve.\nNow here comes the grand finale. Since elliptic curves are finite fields, then we can use the discrete logarithm problem to our advantage. It is very easy to compute $kG$ given $k$ and $G$. But it is hard as fuck to find $k$ given $kG$ and $G$.\nThe secp256k1 Elliptic Curve Let\u0026rsquo;s talk about some facts3 about our muse secp256k1 elliptic curve:\nEquation: $y^2 = x^3 + 7$ $\\mathbb{F}_p$ where $p$: $2^{256} - 2^{32} - 2^9 - 2^8 - 2^7 - 2^6 - 2^4 - 1$ (yes, it is a prime number) Order $n$: this is the number of possible points in the curve4, 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd03641415 Generator Point $G$: (0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798, 0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8)5 License This post is licensed under Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International.\nThis is also why transaction malleability was a problem before Segwit in Bitcoin.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nIf the line is vertical or tangent to the curve, then it intersects the curve in a point at infinity.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nThese are standard and defined in the Standards for Efficient Cryptography Group in their SEC 2 specification.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nTo find the order of an elliptic curve, you can use Schoof\u0026rsquo;s algorithm.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nIt is a fucking big number, so I am putting the values in hexadecimal representation.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://realeinherjar.github.io/2023-10-08-elliptic_curves/","summary":"Warning: This post has KaTeX enabled, so if you want to view the rendered math formulas, you\u0026rsquo;ll have to unfortunately enable JavaScript.\nNote: All elliptic curve images are made using $\\LaTeX$ and TikZ. The source code is freely available at GitHub.\nWhat the hell is an Elliptic Curve? In this post, I\u0026rsquo;ll try to explain what an elliptic curve is, and why it\u0026rsquo;s so important in cryptography. If you ever used an end-to-end encrypted messaging app, or hold Bitcoin (or any other shitcoin, though I don\u0026rsquo;t recommend it), you\u0026rsquo;ve probably heard of elliptic curves.","title":"What the hell is an Elliptic Curve?"},{"content":" Warning: This post has KaTeX enabled, so if you want to view the rendered math formulas, you\u0026rsquo;ll have to unfortunately enable JavaScript.\nWhile attending the 2023 edition of TabConf, hosted in Atlanta, USA, from Sep 6th to Sep 9th, I also attended Base58\u0026rsquo;s intensive course on Taproot and Schnorr signatures. The course took place in the two days before the conference, on Sep 4th and Sep 5th.\nHere is a very broad overview based on my notes, a bunch of readings and some of my own research. I am omitting a lot of details here. If you want to learn more, whenever you see a footnote, or a like to a Bitcoin Imporvement Proposal (BIP), go check it out.\nTaproot Design Goals Taproot was activated as a soft fork in November 2021.\nThe design goals of Taproot are:\nIncrease privacy: hide the spending conditions and also hide the fact that you are using a multisig. Reduce the amount of data on-chain: you only need to commit to the root of the tree, and not the leaves. Use Schnorr: Schnorr signatures are more efficient and allow for signature aggregation. Schnorr Signatures Schnorr signatures are a type of digital signature scheme that provides security and efficiency advantages over traditional ECDSA (Elliptic Curve Digital Signature Algorithm) signatures. They were proposed by the mathematician and cryptographer Claus-Peter Schnorr. Schnorr signatures improve privacy, scalability, and security. Due to the commutativity property, Schnorr signatures can be aggregated, allowing multiple signatures to be combined into a single signature. This improves privacy by obscuring the number of participants in a multi-signature transaction. They are detailed in BIP 340. The nice thing about Schnorr signatures is that the sum of private keys is equal to the private key of the sum of public keys. This is what I call \u0026ldquo;commutativity property\u0026rdquo;, and allows for signature aggregation1.\nHere\u0026rsquo;s in a more formal way:\n$$ P = p \\cdot G $$\nwhere $G$ is the generator point2 and $p$ is the sum of $n$ private keys,\n$$ p = \\sum_{i=1}^{n} p_i $$\nand $P$ is the sum of $n$ public keys3:\n$$ P = \\sum_{i=1}^{n} p_i \\cdot G $$\nValidation of Taproot Scripts The validation of Taproot Scripts as detailed in BIP 342, that deals with OP_CHECKSIG and OP_CHECKSIGADD opcodes4. This does Schnorr signature aggregation during the Script execution.\nA 2-of-3 multisig with Schnorr signatures spending Script with OP_CHECKSIG and OP_CHECKSIGADD would be:\npubkey1 OP_CHECKSIG pubkey2 OP_CHECKSIGADD pubkey3 OP_CHECKSIGADD OP_2 OP_EQUAL This would reveal everyone\u0026rsquo;s public keys on-chain, and also the fact that it is a multisig, with all of the conditions. Additionally, it would be expensive to spend, due to the number of bytes required to commit to the Script on-chain.\nThere are more elegant ways to do this with Taproot Spending Rules and Merkle Trees, which we\u0026rsquo;ll see next.\nTaproot Merkle Tree Taproot is a series of spending conditions that are defined in a binary tree. Instead of a bunch of conditions that are visible using a Script, we have a binary tree with merkle roots.\nRoot | | / \\ / \\ / \\ Cond 1 Cond 2 / \\ / \\ Cond 3 Cond 4 The root is a hash, and is implicity commited to on-chain. The conditions are not visible on-chain, because you just commit the hash of the root on-chain.\nThe way you build the root is by hashing all the intermediate states5, is by hashing all the leaves and branches below the root node. This is done using a $\\operatorname{hash}(l \\mid\\mid r)$ function, where $l$ is the left node and $r$ is the right node6. The locking script will be:\nscript: \u0026lt;version-byte\u0026gt; \u0026lt;data\u0026gt; where:\n\u0026lt;version-byte\u0026gt; is the version byte. This is the version number of our \u0026ldquo;segwit script\u0026rdquo;. \u0026lt;data\u0026gt; is P_x, the x-coordinate of the (tweaked) public key7. Taproot Spending Rules Taproot spending rules are detailed in BIP 341. The way Taproot works is that you have a locking script where all the spending conditions are hidden. This is just the hash of the root of the binary tree below. The way you construct the script is by using a merkle tree, and hashing all the intermediate states, i.e. all the leaves and branches below the root node. The hash is done by concatenating the string representation of the two things you want to hash and applying SHA2566:\nhash = SHA256(left || right) In the following example, you would hash Cond 3 with Cond 4, then hash the result with Cond 1. This is the root commitment, i.e. the root node, and the thing you publish on-chain.\nRoot commitment (locking script) | | / \\ / \\ / \\ Cond 1 Cond 2 (leaf) (branch) / \\ / \\ Cond 3 Cond 4 (leaf) (leaf) We have 3 leaves here: Cond 1, Cond 3 and Cond 4, and 1 branch: Cond 2.\nThe way the spening rules work is that you have to provide a proof-of-inclusion, which depends on the leaf you want to spend. So if you want to spend Cond 3, you need to provide the hash of Cond 4 and Cond 1. Whereas, if you want to spend Cond 1, you just need to provide the hash of Cond 1 and the hash of the branch Cond 2. Hence, spending conditions that are higher in the tree are cheaper to spend, because you need to commit less data on-chain. That is why we structure the tree as most probable to be used on top.\nMuSig2 MuSig2, detailed in BIP 327, is similar to OP_CHECKSIGADD. It allows for signature aggregation in the locking script, and also in the unlocking script. Hence, you can have any multisig with Schnorr signatures, without revealing anything related to the number of participants on-chain, multisig conditions, etc. However, you now need to put all the possible combinations of the pubkeys in the Script. Mind you that this is not a problem, because the resulting aggregate signature will not reveal the underlying individual signatures.\nHere\u0026rsquo;s a MuSig2 example 2-of-3 threshold, you\u0026rsquo;ll need 3 spending conditions:\n$$P_1 + P_2$$ $$P_1 + P_3$$ $$P_2 + P_3$$\nwhere $P_n$ is the public key of the $n$-th participant.\nGenerally, for $n$ pubkeys with a threshold of $t$, you need a list of size $\\binom{n}{t}$ for all possible combinations.\nContinuing the example, for every two pairs of pubkeys, aggregate them using elliptic curve cryptography modular algebra, tweak them (if necessary)7, and create a script:\n(P_1 + P_2) OP_CHECKSIG Next, you consruct your Taproot tree listing all the possible spending conditions. (Remember to prioritize by the most plausible spending conditions on top). Calculate the root commitment by hashing all the intermediate states, which are the spending conditions on each leaf or branch, from bottom to top. Pick an internal key and if necessary, tweak7 it to derive an external key. Finally, lock up some bitcoin to the root commitment. That\u0026rsquo;s it! You have a Taproot tree with MuSig2 that is compact on-chain, and also private. Additionally, you can add more creative spending conditions using Script to the leaves of the tree.\nTo spend it, in your unlocking script, you\u0026rsquo;ll need to provide a proof-of-inclusion of the spending condition you want to spend, and the aggregated signature to unlock that spending condition.\nLicense This post is licensed under Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International.\nSignature aggregations depends on a series of rounds of communication, proposed in MuSig (3 rounds of communication), and superseeded by MuSig2 (which needs 2 rounds of communication, instead of 3) and detailed in BIP 327. There are tweaks to the internal key, and also nonce generation and aggregation. I won\u0026rsquo;t go in to the scope of BIP 327 here, but I recommend you to read it if you want to know more.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nIf you don\u0026rsquo;t know what a generator point is, check the Wikipedia article on Elliptic Curve Cryptography.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nDon\u0026rsquo;t forget to $\\mod{n}$.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nSee the Script page at Bitcoin Wiki.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nAdditionally you need to provide a tag, which are detailed in BIP 340.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nThere are some rules to remove ambiguity on which one will be the left and right node in the hash function.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nIn Taproot Spending rules, you can have an internal key and an external key. The internal key is tweaked with \u0026ldquo;tag\u0026rdquo; hashes to derive the external key. Check BIP 341.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://realeinherjar.github.io/2023-09-08-taproot/","summary":"Warning: This post has KaTeX enabled, so if you want to view the rendered math formulas, you\u0026rsquo;ll have to unfortunately enable JavaScript.\nWhile attending the 2023 edition of TabConf, hosted in Atlanta, USA, from Sep 6th to Sep 9th, I also attended Base58\u0026rsquo;s intensive course on Taproot and Schnorr signatures. The course took place in the two days before the conference, on Sep 4th and Sep 5th.\nHere is a very broad overview based on my notes, a bunch of readings and some of my own research.","title":"Taproot Basics"},{"content":"In Brazil, there\u0026rsquo;s a new law that is being proposed that will allow the government to censor social media posts. The law is called PL 2630/2020 and it\u0026rsquo;s being called the \u0026ldquo;Fake News Law\u0026rdquo;. It\u0026rsquo;s a very dangerous law that will allow the government to censor any post that it deems \u0026ldquo;fake news\u0026rdquo;. The problem is that the definition of \u0026ldquo;fake news\u0026rdquo; is very broad and can be used to censor any post that the government doesn\u0026rsquo;t like.\nIt is actually already being used to do exactly that. On May 2nd, 2023, the Ministry of Justice ordered Google to remove a blog post from its main page. This blog post was Google\u0026rsquo;s opinion on the law and why Google think it is bad. You can find it here.\nThen, on May 12th, 2023, the Supreme Minister Alexandre de Moraes opened a criminal investigation of the Google (and Telegram) directors, on the grounds of \u0026ldquo;abusive campaign against the PL 2630/2020\u0026rdquo;. I don\u0026rsquo;t think that constitutes a crime, but the Supreme Minister does. For my point of view, it\u0026rsquo;s just an opinion, and it\u0026rsquo;s not a crime to have an opinion. Despite not liking Google, I think that it is a valid participant in the discussion of the law. Such discussions should happen in a healthy democracy.\nOf course, Google used its power to promote its opinion, but again that\u0026rsquo;s not a crime. Let\u0026rsquo;s do a thought experiment, let\u0026rsquo;s go back to 1850s USA. Dred Scott v. Sandford (1857), according to Wikipedia, was a \u0026ldquo;landmark decision of the United States Supreme Court that held the U.S. Constitution did not extend American citizenship to people of black African descent, and thus they could not enjoy the rights and privileges the Constitution conferred upon American citizens\u0026rdquo;. That\u0026rsquo;s pretty bad decision, right? Anyone in their right mind today would agree that violates human rights. Now, imagine that one of the most powerful companies at that time, Pacific Main Steamship Company, would use its power to promote the abolitionist movement. Specifically, it would give a pamphlet to every passenger that boarded its ships with the opinion that the American citizenship should be extended to people of \u0026ldquo;black African descent\u0026rdquo;. What would happen to the company? Would it be a crime to promote the abolitionist movement? Would the Supreme Court open a criminal investigation against the company and its directors? Think about this for a moment\u0026hellip;\nThe problem with censorship is that it\u0026rsquo;s very easy to abuse. I honestly don\u0026rsquo;t care about Google, or the PL 2630/2020. I know that the internet is decentralized, and content will always find its way and be available somewhere. There\u0026rsquo;s no way to stop it. But, I am gravely concerned with the precedents that the Brazilian government and Brazilian Supreme Court are setting when they censor opinions that they don\u0026rsquo;t like.\nLicense This post is licensed under Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International.\n","permalink":"https://realeinherjar.github.io/2023-08-19-censorship/","summary":"In Brazil, there\u0026rsquo;s a new law that is being proposed that will allow the government to censor social media posts. The law is called PL 2630/2020 and it\u0026rsquo;s being called the \u0026ldquo;Fake News Law\u0026rdquo;. It\u0026rsquo;s a very dangerous law that will allow the government to censor any post that it deems \u0026ldquo;fake news\u0026rdquo;. The problem is that the definition of \u0026ldquo;fake news\u0026rdquo; is very broad and can be used to censor any post that the government doesn\u0026rsquo;t like.","title":"On Censorship"},{"content":"This is a nym. I\u0026rsquo;m a recovering academic in my mid-30s. I hold a PhD and was a faculty member in a computer science department for 5 years. My background is in computational statistics and machine learning. I\u0026rsquo;ve supervised a couple of PhD students, and taught undergraduate and graduate courses in machine learning, deep learning, statistics, data science, and programming.\nI am fluent in Rust, Python, and C/C++. Due to my data science background, I also know R, SQL, and Julia. I am comfortable in navigating almost any codebase, disrespecting the programming language, and also in learning new languages and frameworks. I am avid Nix user and advocate. My workflow, both personal and professional, is heavily based on Git and GitHub: PRs, issues, code reviews, CI/CD, project management, releases, etc. I have solid experience with Docker, Linux and Nix environments, and cloud computing. As a computational scientist, I am familiar with cryptography, and I have advanced math skills.\nDuring the day, I work full-time as a senior scientific software engineer at a software company. In my free time, I follow the technical developments of Bitcoin, and also contribute to the ecosystem. I have a deep understanding of the Bitcoin protocol, lightning network, and the ecosystem in general. I also have a good understanding of the economics and game theory behind Bitcoin. Furthermore, I have knowledge about the codebases of open-source Bitcoin projects, mainly in Rust and C/C++.\nCheck my portfolio at GitHub for some of my projects. If you want a full CV, please contact me.\n","permalink":"https://realeinherjar.github.io/about/","summary":"This is a nym. I\u0026rsquo;m a recovering academic in my mid-30s. I hold a PhD and was a faculty member in a computer science department for 5 years. My background is in computational statistics and machine learning. I\u0026rsquo;ve supervised a couple of PhD students, and taught undergraduate and graduate courses in machine learning, deep learning, statistics, data science, and programming.\nI am fluent in Rust, Python, and C/C++. Due to my data science background, I also know R, SQL, and Julia.","title":"About"}]