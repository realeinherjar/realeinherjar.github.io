<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>bitcoin on Einherjar</title>
    <link>https://realeinherjar.github.io/tags/bitcoin/</link>
    <description>Recent content in bitcoin on Einherjar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/)</copyright>
    <lastBuildDate>Sat, 07 Oct 2023 09:29:09 -0300</lastBuildDate><atom:link href="https://realeinherjar.github.io/tags/bitcoin/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Privacy Basics</title>
      <link>https://realeinherjar.github.io/privacy/</link>
      <pubDate>Sat, 07 Oct 2023 09:29:09 -0300</pubDate>
      
      <guid>https://realeinherjar.github.io/privacy/</guid>
      <description>Why Privacy is Important? First, the definition of privacy according to the Cyphepunk Manifesto:
Privacy is necessary for an open society in the electronic age. Privacy is not secrecy. A private matter is something one doesn&amp;rsquo;t want the whole world to know, but a secret matter is something one doesn&amp;rsquo;t want anybody to know. Privacy is the power to selectively reveal oneself to the world.
Privacy is not just a personal preference but a fundamental right that is essential for protecting individual freedom, democracy, and the integrity of the digital world.</description>
      <content:encoded><![CDATA[<h2 id="why-privacy-is-important">Why Privacy is Important?</h2>
<p>First, the definition of privacy according to the <a href="https://nakamotoinstitute.org/cypherpunk-manifesto">Cyphepunk Manifesto</a>:</p>
<blockquote>
<p>Privacy is necessary for an open society in the electronic age.
Privacy is not secrecy.
A private matter is something one doesn&rsquo;t want the whole world to know,
but a secret matter is something one doesn&rsquo;t want anybody to know.
<strong>Privacy is the power to selectively reveal oneself to the world</strong>.</p>
</blockquote>
<p>Privacy is not just a personal preference
but a <strong>fundamental right that is essential for protecting individual freedom,
democracy, and the integrity of the digital world</strong>.</p>
<p>Privacy is also important because it allows individuals to express themselves freely without fear of reprisal.
In a world where dissent is not tolerated,
privacy allows people to speak out against the system without putting themselves in danger.
It also allows people to explore their identities and beliefs without fear of judgment or persecution.</p>
<p>Furthermore, privacy is essential for maintaining trust in relationships.
In a world where everything is monitored and recorded,
privacy is the only way to maintain intimacy and trust in personal relationships.
Without privacy, relationships become transactional and superficial,
devoid of the emotional connection that makes them meaningful.</p>
<p>Finally, privacy is important for democracy.
In a world where information is power,
privacy ensures that everyone has access to the same information and is not unfairly disadvantaged.
Without privacy, those in power can use their access to information to manipulate elections and undermine democracy.</p>
<h2 id="how-to-migrate-to-a-secure-and-private-tools">How to migrate to a secure and private tools?</h2>
<blockquote>
<p>NOTE: most of the recommendations here are in sync with the recommendations of <a href="https://www.privacyguides.org/">privacyguides.org</a>.
I highly recommend their recommendations and guides.</p>
</blockquote>
<ol>
<li>Get a Linux-capable notebook.
<a href="https://frame.work/">Framework Laptops</a> seems a nice addition with the user customization,
upgradable and repairable.
<a href="https://system76.com/">System76</a> hardware is also great with the open firmware,
native coreboot and Intel&rsquo;s Management Engine (IME)
(avoid AMD machines since System76 cannot disable
the ADM Platform Security Processor - PSP.)
Also don&rsquo;t forget to disable Intel&rsquo;s ME with <a href="https://github.com/corna/me_cleaner"><code>corna/me_cleaner</code></a>.</li>
<li>Get a Google Pixel smartphone.
Install <a href="https://grapheneos.org/">GrapheneOS</a>.
It is more secure than any Linux distribution.</li>
</ol>
<p><a href="https://www.privacyguides.org/android/#grapheneos">GrapheneOS</a>
should be your default high-secure medium,
and Linux coming close as a second-best alternative.</p>
<h2 id="linuxqubes">Linux/Qubes</h2>
<p>Linux is <em>not</em> a silver bullet.</p>
<p>Linux is <a href="https://madaidans-insecurities.github.io/linux.html"><strong><em>not</em> safe</strong></a>.</p>
<p>That&rsquo;s why I recommend <a href="https://www.qubes-os.org/"><strong>Qubes OS</strong></a>.</p>
<h3 id="qubes-oshttpswwwqubes-osorg"><a href="https://www.qubes-os.org/">Qubes OS</a></h3>
<p>This is the <strong>most secure persistent-storage OS</strong>.
It uses level-1 virtualization to compartmentalize everything.
There&rsquo;s a great guide on how to install Qubes at <a href="https://anonymousplanet.org/guide.html#the-qubes-route">anonymousplanet.org</a>.
For the extra paranoid there&rsquo;s a <a href="https://forum.qubes-os.org/t/playing-with-qubes-part-2/12102">detached encrypted boot and header guide</a>.
By using a detached header the encrypted blockdevice itself only carries encrypted data,
which gives <a href="https://en.wikipedia.org/wiki/Deniable_encryption">deniable encryption</a> as long as the existence of a header is unknown to the attackers.
<strong>Deniable encryption</strong> describes encryption techniques where the existence of an encrypted file or message is deniable in the sense that an adversary cannot prove that the plaintext data exists</p>
<p>Some suggestions on how to run your Qubes OS:</p>
<ol>
<li>
<p><strong>Disable Bluetooth.</strong>
Disable, preferably in BIOS, bluetooth, fingerprint scanner,
and any other useless stuff that enhances your attack surface.</p>
<p>Alternatively, you can start <code>dom0</code> and edit the <code>/etc/modprobe.d/blacklist-bluetooth.conf</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">blacklist bnep
</span></span><span class="line"><span class="cl">blacklist bluetooth
</span></span><span class="line"><span class="cl">blacklist btusb
</span></span></code></pre></div></li>
<li>
<p><strong>Activate <a href="https://github.com/QubesOS/qubes-antievilmaid">Anti Evil Maid</a></strong>,
if your hardware supports it (TPM 1.2).</p>
</li>
<li>
<p><strong>Use Btrfs filesystem</strong>.
The default Qubes filesystem is LVM-enabled ext4.
If you have very large (in space) VMs you might <a href="https://github.com/QubesOS/qubes-issues/issues/5426#issuecomment-678740371">experience issues</a>.
<code>dom0</code> really hogs up the cpu after shutdown of huge app VMs.
Btrfs solves this issue.</p>
</li>
<li>
<p><strong>Split Everything</strong>:</p>
<ul>
<li><strong>Split GPG</strong>: Follow the instructions at <a href="https://www.qubes-os.org/doc/split-gpg/"><code>qubes-os.org/doc/split-gpg</code></a></li>
<li><strong>Split SSH</strong>: Follow the instructions at <a href="https://github.com/Qubes-Community/Contents/blob/master/docs/configuration/split-ssh.md"><code>Qubes-Community</code> Docs</a></li>
<li><strong>U2F Proxy</strong>: Follow the instructions at <a href="https://www.qubes-os.org/doc/u2f-proxy/"><code>qubes-os.org/doc/u2f-proxy</code></a></li>
</ul>
</li>
</ol>
<h3 id="linux">Linux</h3>
<blockquote>
<p>Don&rsquo;t forget to check my <a href="https://github.com/realeinherjar/flakes">NixOS paranoid build with root on <code>tmpfs</code></a>.
This means that everything outside some directories of <code>/etc</code> and <code>/home</code> will be wiped out.</p>
</blockquote>
<p>Knowing that if you still want to use Linux, go ahead.
Linux is much better than Windows.
There are some nice information on <a href="https://madaidans-insecurities.github.io/guides/linux-hardening.html">how to harden your Linux system</a> (additional resource <a href="https://privsec.dev/posts/linux/desktop-linux-hardening/">here</a>)
If you want the maximum available privacy and security in your Linux distribution:</p>
<ol>
<li>
<p><strong>Use Private and Secure Distributions!</strong>
Avoid telemetry that often comes with proprietary operating systems.
Maintain <a href="https://www.gnu.org/philosophy/free-sw.en.html#four-freedoms">software freedom</a>.
Encrypt your system (<strong>ALWAYS</strong>).</p>
</li>
<li>
<p><a href="https://www.privacyguides.org/linux-desktop/hardening/#secure-boot"><strong>Use Secure Boot</strong></a>.
<a href="https://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface#Secure_Boot">Secure Boot</a> can be used to secure the boot process by preventing the loading of unsigned UEFI drivers or boot loaders.
This is specially useful against <a href="https://en.wikipedia.org/wiki/Evil_maid_attack">evil maid attacks</a>.</p>
</li>
<li>
<p><strong>Don&rsquo;t use Swap partition.</strong>
Consider using <a href="https://docs.fedoraproject.org/en-US/fedora-coreos/sysconfig-configure-swaponzram/">ZRAM</a> to avoid potential security issues with sensitive data being pushed to swap space.</p>
</li>
<li>
<p><strong>Use <a href="https://wayland.freedesktop.org/">Wayland</a>.</strong>
It is <a href="https://www.privacyguides.org/linux-desktop/#wayland">more secure than Xorg</a>,
because it is developed with <a href="https://lwn.net/Articles/589147/">security in mind</a>,
supporting GUI isolation,
allowing none of the windows to record screen,
log and inject inputs in other window.</p>
</li>
<li>
<p><strong>Use <a href="https://fedoramagazine.org/randomize-mac-address-nm/">Network Manager MAC randomization</a>.</strong>
Create a file <code>/etc/NetworkManager/conf.d/wifi_rand_mac.conf</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>device-mac-randomization<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># &#34;yes&#34; is already the default for scanning</span>
</span></span><span class="line"><span class="cl">wifi.scan-rand-mac-address<span class="o">=</span>yes
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>connection-mac-randomization<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Randomize MAC for every ethernet connection</span>
</span></span><span class="line"><span class="cl">ethernet.cloned-mac-address<span class="o">=</span>random
</span></span><span class="line"><span class="cl"><span class="c1"># Generate a randomized value upon each connection</span>
</span></span><span class="line"><span class="cl">wifi.cloned-mac-address<span class="o">=</span>random
</span></span><span class="line"><span class="cl"><span class="c1"># Generate a random MAC for each WiFi and associate the two permanently</span>
</span></span><span class="line"><span class="cl"><span class="c1">#wifi.cloned-mac-address=stable</span>
</span></span></code></pre></div></li>
<li>
<p><strong>Use a <code>/etc/hosts</code> file to block spyware, adware and malware system-wide.</strong>
I recommend <a href="https://github.com/StevenBlack/hosts"><code>StevenBlack/hosts</code></a>.</p>
</li>
<li>
<p><strong>If you need <a href="https://madaidans-insecurities.github.io/vpns.html">VPN</a>, use <a href="https://mullvad.net">mullvad</a>.</strong></p>
</li>
<li>
<p><strong>Use a custom <a href="https://www.privacyguides.org/dns/">DNS Resolver</a>.</strong>
I sometimes use <a href="https://mullvad.net/en/help/dns-over-https-and-dns-over-tls/">mullvad&rsquo;s adblock DNS over TLS</a>:
<code>adblock.doh.mullvad.net</code>.
You can find the list at <a href="https://github.com/mullvad/dns-blocklists/tree/main/lists"><code>mullvad/dns-blocklists</code></a>.</p>
</li>
<li>
<p><strong>Use a <a href="https://www.privacyguides.org/linux-desktop/hardening/#firewalls">firewall</a>.</strong>
You could also set your default firewall zone to drop packets:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">firewall-cmd --set-default-zone<span class="o">=</span>drop<span class="p">;</span>
</span></span><span class="line"><span class="cl">firewall-cmd --add-protocol<span class="o">=</span>ipv6-icmp --permanent<span class="p">;</span>
</span></span><span class="line"><span class="cl">firewall-cmd --add-service<span class="o">=</span>dhcpv6-client --permanent<span class="p">;</span>
</span></span></code></pre></div></li>
<li>
<p><strong>Use <a href="https://fedoraproject.org/wiki/Disk_Encryption_User_Guide">Full Disk Encryption</a>.</strong>
Also make sure that you PBKDF is <code>argon2i</code> as <a href="#a-note-about-quantum-computers">detailed below</a>.</p>
</li>
<li>
<p><strong>Secure your <a href="https://docs.fedoraproject.org/en-US/fedora-coreos/grub-password/">bootloader (generally GRUB) with a password</a>.</strong></p>
</li>
<li>
<p><strong>Never leave your master GPG key in your computer.</strong>
The files in our home directory are not as well protected as we like to think.
They can be leaked or stolen.
Remove your master key from your home directory and store it on offline storage.
Use subkeys.
Follow the <a href="https://www.kernel.org/doc/html/latest/process/maintainer-pgp-guide.html">Linux Kernel Maintainer PGP Guide</a>,
and also the <a href="https://help.riseup.net/en/security/message-security/openpgp/best-practices">Riseup OpenPGP Best Practices</a>
(which are at
<a href="https://github.com/ioerror/duraconf">Jacob Appelbaum’s <code>duraconf</code> “collection of hardened configuration files”</a>).
This means getting a PGP Smart card.
Yubikey are prevalent all over the world,
and you can have easy access to buying them.
Use it.</p>
</li>
<li>
<p><strong>If you are accessing through SSH,
<a href="https://wiki.gentoo.org/wiki/Security_Handbook/Securing_services#SSH">turn on a stronger authentication based on public key encryption</a>.</strong></p>
</li>
<li>
<p><strong><a href="https://www.privacyguides.org/linux-desktop/sandboxing/#mandatory-access-control">Sandbox</a> almost everything that you don&rsquo;t trust.</strong>
If you need to use proprietary crap,
run in flatpak and use <a href="https://github.com/tchx84/flatseal"><code>flatseal</code></a>
for a simple GUI to sandbox permissions.</p>
</li>
<li>
<p><strong>Disable Bluetooth</strong>:
You can disable at OS level with <code>systemd</code> and at kernel level with <code>modprobe</code>.</p>
<ul>
<li>
<p><code>systemd</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">systemctl stop bluetooth.service
</span></span><span class="line"><span class="cl">systemctl disable bluetooth.service
</span></span><span class="line"><span class="cl">systemctl mask bluetooth.service
</span></span></code></pre></div></li>
<li>
<p><code>modprobe</code>:
You may instead want to tell your kernel not to load the driver for these wireless devices at all.
This means your OS and kernel won&rsquo;t know how to interface with these devices, and they will remain unpowered.</p>
<p>First, check what kernel modules are currently loaded with <code>lsmod</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cat@rt~ $ sudo lsmod
</span></span><span class="line"><span class="cl">Module                  Size  Used by
</span></span><span class="line"><span class="cl">btusb                  <span class="m">57344</span>  <span class="m">0</span>
</span></span><span class="line"><span class="cl">btrtl                  <span class="m">20480</span>  <span class="m">1</span> btusb
</span></span><span class="line"><span class="cl">btbcm                  <span class="m">16384</span>  <span class="m">1</span> btusb
</span></span><span class="line"><span class="cl">btintel                <span class="m">28672</span>  <span class="m">1</span> btusb
</span></span><span class="line"><span class="cl">bluetooth             <span class="m">577536</span>  <span class="m">5</span> btrtl,btintel,btbcm,btusb
</span></span><span class="line"><span class="cl">ecdh_generic           <span class="m">16384</span>  <span class="m">1</span> bluetooth
</span></span><span class="line"><span class="cl">ecc                    <span class="m">32768</span>  <span class="m">1</span> ecdh_generic
</span></span><span class="line"><span class="cl"><span class="o">[</span>...<span class="o">]</span>
</span></span></code></pre></div><p>We can see on my machine there are several bluetooth drivers running.
<code>btusb</code>, <code>btrtl</code>, <code>btbcm</code>, <code>btintel</code>, and <code>bluetooth</code>.</p>
<p><code>btusb</code> is the generic driver that each of the other modules relies on.
It should be sufficient just to unload <code>btusb</code>,
but since I know the others aren&rsquo;t going to be used either,
I like to be thorough and make sure none of these drivers load.</p>
<p>We will do this with <code>modprobe</code> by telling its configuration file to ignore
these kernel modules with the <code>blacklist</code> command.
This will go in <code>/etc/modprobe.d/blacklist.conf</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">blacklist btusb
</span></span><span class="line"><span class="cl">blacklist btrtl
</span></span><span class="line"><span class="cl">blacklist btbcm
</span></span><span class="line"><span class="cl">blacklist btintel
</span></span><span class="line"><span class="cl">blacklist bluetooth
</span></span></code></pre></div><p>To avoid GNOME crashes install the <code>gnome-shell-extension-remove-bluetooth-icon</code> package.</p>
</li>
</ul>
</li>
</ol>
<h3 id="open-source-alternatives">Open Source Alternatives</h3>
<p>Here are some of my suggestions for you to migrate your proprietary tools to open source tools:</p>
<ul>
<li>Messaging: <a href="https://signal.org/">Signal</a>
(or the FOSS fork <a href="https://molly.im/">Molly</a>),
<a href="https://simplex.chat/">SimpleX</a>,
<a href="https://element.io/">Element (Matrix client)</a>,
<a href="https://getsession.org/">Session</a>,
<a href="https://briarproject.org/">Briar</a>
and <a href="https://cwtch.im/">Cwtch</a>.</li>
<li>Email: <a href="https://protonmail.com/">ProtonMail</a>
or <a href="https://tutanota.com/">Tutanota</a>
with <a href="https://neomutt.org/">NeoMutt</a> or <a href="https://aerc-mail.org/">aerc</a>;
depending on your threat model you might want to self-host your mail server,
try <a href="https://github.com/LukeSmithxyz/emailwiz"><code>LukeSmithxyz/emailwiz</code></a>.
You can also try GUI interfaces like <a href="https://www.thunderbird.net">Thunderbird</a>,
or the fine-tuned fork <a href="https://www.betterbird.eu/">Betterbird</a>.</li>
<li>Conferencing: <a href="https://jami.net/">Jami</a> and <a href="https://meet.jit.si/">Jitsi</a>.</li>
<li>Text Editing: <a href="https://helix-editor.com/">Helix</a>/<a href="https://neovim.io/">NeoVim</a>/<a href="https://www.vim.org">Vim</a>/<a href="https://github.com/VSCodium/vscodium">VSCodium</a>
for Markdown, text and LaTeX,
<a href="https://www.libreoffice.org/">LibreOffice</a> and <a href="https://pandoc.org/">Pandoc</a>.</li>
<li>PDF Documents: <a href="https://pwmt.org/projects/zathura/">Zathura</a>.
(available in every Linux major distro),
<a href="https://github.com/ahrm/sioyek">Sioyek</a>
(supports highlighting and other fancy nice stuff),
and <a href="https://wiki.gnome.org/Apps/Evince">Evince</a> (which comes by default in GNOME).</li>
<li>Ebooks: <a href="https://calibre-ebook.com/">Calibre</a> and
<a href="https://johnfactotum.github.io/foliate/">Foliate</a>.</li>
<li>Web Browser: <a href="https://github.com/arkenfox/user.js">hardened Firefox</a>,
and <a href="https://github.com/ungoogled-software/ungoogled-chromium">ungoogled-chromium</a> if you need a Chromium-based browser.
You can get it using <a href="https://flatpak.org/">flatpak</a> in <a href="https://flathub.org/apps/details/com.github.Eloston.UngoogledChromium">flathub</a>.</li>
<li>Search: <a href="https://searx.space/">searX</a>.
You can use the <a href="https://searx.neocities.org/">Random searX Redirector</a>,
that will forward your search to one of the 75 random volunteer-run public searX servers to thwart mass surveillance.</li>
<li>News: You can get RSS feeds with <a href="https://gitlab.com/news-flash/news_flash_gtk">NewsFlash</a> (GUI)
or <a href="https://newsboat.org/">newsboat</a> (CLI).</li>
<li>Password Manager: always go OFFLINE either <a href="https://keepassxc.org/">KeePassXC</a>
or <a href="https://www.passwordstore.org/">pass</a>.</li>
<li>Cloud: backup stuff with <a href="https://rsync.samba.org/">rsync</a> and
<a href="https://clonezilla.org/">clonezilla</a>;
always encrypt stuff with <a href="https://gitlab.com/cryptsetup/cryptsetup/">LUKS</a>,
<a href="https://www.veracrypt.fr/">VeraCrypt</a> (VeraCrypt has <a href="https://veracrypt.fr/en/Plausible%20Deniability.html">plausible deniability</a>),
or <a href="https://cryptomator.org">Cryptomator</a>.</li>
<li>File Sharing: <a href="https://onionshare.org/">onionshare</a>,
<a href="https://securedrop.org/">securedrop</a>
and <a href="https://github.com/schollz/croc">croc</a>.</li>
<li>Image Editing: <a href="https://inkscape.org/">Inkscape</a> for vector graphics,
or <a href="https://www.gimp.org/">GIMP</a> for image editing.</li>
<li>Video: <a href="https://obsproject.com/">OBS Studio</a> for video capturing,
<a href="https://ffmpeg.org/">ffmpeg</a> for CLI video editing, or
<a href="https://www.shotcut.org/">Shotcut</a> for GUI video editing.</li>
<li>Music Player: <a href="https://cmus.github.io/">Cmus</a>
for a CLI app,
or <a href="https://wiki.gnome.org/Apps/Lollypop">Lollypop</a>
for a GUI app.</li>
<li>Spotify: DON&rsquo;T! Use <code>mp3</code> files (or even better <code>opus</code> files),
but if you want,
<a href="https://github.com/Shabinder/SpotiFlyer">SpotiFlyer</a>,
<a href="https://github.com/spotDL/spotify-downloader">SpotDL</a>,
and <a href="https://github.com/abba23/spotify-adblock">spotify-adblock</a>.
There&rsquo;s also <a href="https://github.com/KRTirtho/spotube">Spotube</a>.</li>
<li>YouTube: <a href="https://github.com/FreeTubeApp/FreeTube">FreeTube</a>,
<a href="https://github.com/TeamNewPipe/NewPipe">NewPipe</a>,
<a href="https://github.com/ytdl-org/youtube-dl">youtube-dl(deprecated)</a>,
<a href="https://github.com/yt-dlp/yt-dlp">yt-dlp</a>
and <a href="https://github.com/pystardust/ytfzf">ytfzf</a>.</li>
<li>Netflix etc: Torrents
(<a href="https://github.com/transmission/transmission">transmission</a>)
with <a href="https://github.com/videolan/vlc">vlc</a> and
<a href="https://mpv.io/">mpv</a>
(also try <a href="https://github.com/mafintosh/peerflix">peerflix</a> or <a href="https://github.com/webtorrent/webtorrent-cli">webtorrent-cli</a>).</li>
<li>IDE: <a href="https://helix-editor.com/">Helix</a>/<a href="https://neovim.io/">NeoVim</a> with
<a href="https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md">LSP</a>,
or <a href="https://github.com/VSCodium/vscodium">VSCodium</a>.</li>
<li>Reference Manager: <a href="https://www.zotero.org/">Zotero</a> (GUI)
or <a href="https://papis.readthedocs.io/">papis</a> (CLI).</li>
</ul>
<h2 id="grapheneos">GrapheneOS</h2>
<p><a href="https://grapheneos.org/">GrapheneOS</a> is a privacy and security focused mobile OS
with Android app compatibility developed as a non-profit open source project.</p>
<p>GrapheneOS improves the privacy and security of the OS from the bottom up.
It deploys technologies to mitigate whole classes of vulnerabilities and
make exploiting the most common sources of vulnerabilities substantially more difficult.
It improves the security of both the OS and the apps running on it.
The app sandbox and other security boundaries are fortified.
GrapheneOS tries to avoid impacting the user experience
with the privacy and security features.
Ideally, the features can be designed so that they&rsquo;re always enabled with
no impact on the user experience and
no additional complexity like configuration options.
It&rsquo;s not always feasible, and GrapheneOS does add various toggles for features
like the Network permission,
Sensors permission, restrictions when the device is locked (USB peripherals,
camera, quick tiles), etc. along with more complex user-facing privacy
and security features with their own UX.</p>
<p>GrapheneOS is recommended as one of the <a href="https://madaidans-insecurities.github.io/android.html">most secure and private option on Android</a>.</p>
<h3 id="how-to-install">How to install</h3>
<p>GrapheneOS has two officially supported installation methods.
You can either use the <a href="https://grapheneos.org/install/web">WebUSB-based installed</a>
recommended for most users
or the <a href="https://grapheneos.org/install/cli">command-line installation guide</a>
aimed at more technical users.</p>
<h3 id="a-note-regarding-battery-life">A note regarding battery life</h3>
<p>You don&rsquo;t need to do battery optimizations.
Modern phones with built-in batteries have their own computers onboard the computer,
which can take into account the number of charge cycles the battery has undergone and automatically reallocate overprovisioning as required to ensure they automatically and transparently set the charging and cutoff thresholds to give the best health of the battery over time.
This makes the old school of thought of charging to 80% obsolete.</p>
<p>Take a look at the <a href="https://gist.github.com/Peter-Easton/4982f66e93387e02dd2c1d677d71f4f2">GrapheneOS battery recommendations</a></p>
<h3 id="apps">Apps</h3>
<p>It already comes with a nice browser
(<a href="https://github.com/GrapheneOS/Vanadium">Vanadium</a>) and a good Camera App.</p>
<p>You can also <a href="https://grapheneos.org/usage#sandboxed-google-play">sandbox Google Play apps in GrapheneOS</a></p>
<p>The vital apps to have:</p>
<blockquote>
<p>A good list can be found at <a href="https://brainfucksec.github.io/android-foss-apps-list"><code>brainfucksec.github.io</code></a>.</p>
</blockquote>
<ol>
<li><a href="https://f-droid.org">F-Droid</a>.</li>
<li><a href="https://f-droid.org/packages/com.aurora.store">Aurora Store for Google Play Apps</a>:
<ul>
<li>Banking Apps (You&rsquo;ll probably need to <a href="https://grapheneos.org/usage#sandboxed-google-play">sandbox</a>
them in a separated user).
Also for those nasty banking apps you can check one of the <a href="https://privsec.dev/apps/banking-applications-compatibility-with-graphheneos/">GrapheneOS&rsquo; core dev banking apps compatibility page</a>.</li>
<li>Uber (You don&rsquo;t need the app, <code>m.uber.com</code> in a mobile browser works great)</li>
</ul>
</li>
<li><a href="https://f-droid.org/packages/eu.faircode.email/">Emails with FairEmail</a>
It supports PGP sign/encrypt.
<ul>
<li>You will need to use the <a href="https://github.com/M66B/FairEmail">GitHub version</a>
to support Gmail.</li>
</ul>
</li>
<li><a href="https://www.bromite.org/fdroid">Privacy Browser with Bromite</a>
(additionally check <a href="https://brainfucksec.github.io/bromite-android-browser"><code>brainfucksec.github.io</code></a> for Bromite hardening tips)</li>
<li><a href="https://f-droid.org/packages/at.bitfire.davdroid/">Calendar with DAVx5</a>:
<ul>
<li><a href="https://www.davx5.com/tested-with/google">Google</a></li>
</ul>
</li>
<li>Passwords and TOPT with <a href="https://f-droid.org/packages/com.kunzisoft.keepass.libre">KeePassDX</a>.</li>
<li>GPG Keys with <a href="https://f-droid.org/packages/org.sufficientlysecure.keychain/">OpenKeyChain</a>.</li>
<li>If you need <a href="https://madaidans-insecurities.github.io/vpns.html">VPN</a> use <a href="https://f-droid.org/packages/net.mullvad.mullvadvpn/">mullvad</a>.</li>
<li><a href="https://f-droid.org/packages/io.simplelogin.android.fdroid/">Email alises with SimpleLogin</a>.</li>
<li><a href="https://f-droid.org/packages/org.schabi.newpipe/">YouTube with NewPipe</a>.</li>
<li><a href="https://f-droid.org/packages/com.shabinder.spotiflyer/">Spotify with SpotiFlyer</a>.
Note that you can also download Spotify playlists with <a href="https://github.com/spotDL/spotify-downloader">SpotDL</a>.
There&rsquo;s an open source frontend for Spotify called <a href="https://f-droid.org/packages/oss.krtirtho.spotube/">Spotube</a>.
There&rsquo;s an open source frontend for YouTube Music called <a href="https://f-droid.org/packages/it.vfsfitvnm.vimusic/">ViMusic</a>.</li>
<li>Videos with <a href="https://f-droid.org/packages/org.videolan.vlc/">VLC</a> or <a href="https://f-droid.org/packages/is.xyz.mpv/">mpv</a>.</li>
<li><a href="https://f-droid.org/packages/com.nononsenseapps.feeder/">RSS Feeds with Feeder</a>.</li>
<li><a href="https://f-droid.org/packages/com.todobom.opennotescanner">PDF Scanner with Open Note Scanner</a>.</li>
<li><a href="https://support.torproject.org/tormobile/tormobile-7">TorBrowser with Guardian Project&rsquo;s F-Droid Repository</a>.</li>
<li><a href="https://f-droid.org/packages/net.osmand.plus">Navigation with OsmAnd+</a> and <a href="https://f-droid.org/packages/app.organicmaps/">Organic Maps</a>.</li>
<li>Messaging with <a href="https://signal.org/android/apk/">Signal</a>,
<a href="https://fdroid.getsession.org/">Session</a>,
and <a href="https://f-droid.org/packages/chat.simplex.app/">SimpleX</a>.</li>
<li>Removing EXIF and compressing Images with <a href="https://f-droid.org/packages/de.kaffeemitkoffein.imagepipe">ImagePipe</a>,
<a href="https://guardianproject.info/apps/obscuracam/">ObscuraCam</a>
or <a href="https://f-droid.org/packages/com.jarsilio.android.scrambledeggsif/">Scrambled Exif</a>.</li>
<li><a href="https://f-droid.org/packages/cz.martykan.forecastie/">Weather with Forecastie</a>.</li>
<li><a href="https://f-droid.org/packages/cx.ring/">Online Meetings with Jami</a>.</li>
<li><a href="https://f-droid.org/packages/com.foobnix.pro.pdf.reader/">PDF and ebooks with Librera Reader</a>.</li>
<li>Torrents and General downloads with <a href="https://f-droid.org/packages/com.gianlu.aria2app/">Aria2App</a>
<a href="https://f-droid.org/packages/org.proninyaroslav.libretorrent/">LibreTorrent</a>.</li>
<li><a href="https://f-droid.org/packages/de.qwerty287.ftpclient/">FTPClient</a>.</li>
<li><a href="https://f-droid.org/packages/eu.faircode.netguard/">Control your Smartphone Internet with NetGuard</a>.
You don&rsquo;t need to install this.
The most effective way to block network access is to revoke the network permission from the app like <a href="https://grapheneos.org/features#network-permission-toggle">GrapheneOS allows you to do</a>.</li>
<li><a href="https://adaway.org/">Block Adware, Spyware and Malware with AdAway</a>
(it uses <a href="https://github.com/StevenBlack/hosts"><code>StevenBlack/hosts</code></a>
under the hood).</li>
<li><a href="https://f-droid.org/packages/dummydomain.yetanothercallblocker/">Block unwanted calls with Yet Another Call Blocker</a>.</li>
<li><a href="https://www.simplemobiletools.com/">Simple Mobile Tools</a>.</li>
</ol>
<h2 id="what-about-vpn">What about VPN?</h2>
<blockquote>
<p>If you are using a VPN, check if you are leaking your DNS with <a href="https://dnsleaktest.com/">https://dnsleaktest.com/</a>.</p>
</blockquote>
<p>VPNs are no <a href="https://www.privacyguides.org/vpn/">silver bullet</a>.
Do not trust all the VPN ads.
They are made for you to <strong>buy</strong> stuff.
You are just transferring the trust from your ISP
(<strong>I</strong>nternet <strong>S</strong>ervice <strong>P</strong>rovider)
to your VPN service provider.</p>
<p>But they are useful, specifically for:</p>
<ol>
<li>You need to have a specific geolocated IP address.</li>
<li>You need to hide some stuff from your ISP
(this is most important if you are a person of interest in
a f*****-up country).</li>
<li>You need to increase your anonymity set,
i.e. have a plausible deniability that you might or might not be someone.
This is recommended when downloading and seeding torrents.</li>
</ol>
<p>Suggestions:</p>
<ul>
<li>If you want a <strong>simple solution</strong> just use <a href="https://mullvad.net/en/">Mullvad</a>.
They are a notorious private VPN service that claims to do no logging and
also no personal information.
Also, Mullvad is located in Sweden which has very good privacy-respecting laws.
Buy a subscription using cryptocurrency with obfuscation techniques,
such as Monero or coinjoined Bitcoin.</li>
<li>If you want to <strong>do it yourself</strong> see this <a href="https://www.youtube.com/watch?v=szGsh5J9bzY">video guide by mental outlaw</a>.
It teaches you how to make your own VPN with OpenBSD
(a <strong>VERY</strong> secure Unix-based OS) and WireGuard.
For the VPS hosting, use either <a href="https://1984.hosting/">1984</a>
or <a href="https://www.orangewebsite.com/">orange</a>.
Both are located in Iceland which has very good privacy-respecting laws.</li>
<li>You can also just use <a href="https://www.torproject.org/"><strong>Tor</strong></a> to obfuscate you traffic.</li>
</ul>
<p>If you need to use a VPN but somehow either obfuscate even further
or bypass some restriction or firewall block,
use <a href="https://shadowsocks.org/">Shadowsocks</a>.</p>
<h2 id="browser-extensions">Browser Extensions</h2>
<p>Remember that the browser is pretty much a <strong><em>glorified</em> remote code execution machine</strong>.
That pretty much means a privacy and security nightmare.
So you need to have sane defaults.
The idea here is to block everything (<em>opt-out</em>) by default and whitelist (<em>opt-in</em>) as necessary.</p>
<p><a href="https://github.com/gorhill/uBlock">uBlock Origin</a>, the only one you need!
I recommend using the <a href="https://github.com/gorhill/uBlock/wiki/Blocking-mode:-hard-mode">Hard Mode</a>,
with <a href="https://github.com/gorhill/uBlock/wiki/Per-site-switches#no-scripting">disabled JavaScript</a>
and whitelist sites as necessary.</p>
<h2 id="email-aliasing">Email Aliasing</h2>
<p>It is one of the most powerful privacy devices that you have.
I use <a href="https://simplelogin.io">simplelogin</a>.</p>
<h2 id="file-sharing">File Sharing</h2>
<p><strong>Send</strong> is a fork from the discontinued project Firefox Send.
It provides <a href="https://github.com/timvisee/send/blob/master/docs/encryption.md">end-to-end encryption</a> with optional password.
You can run your <a href="https://github.com/timvisee/send-instances/#host-your-own-instance">own instance</a>.
The author of this fork also provides a <a href="https://github.com/timvisee/ffsend">command-line client</a> to send files from your terminal to the Firefox Send instances.</p>
<p>Many <a href="https://github.com/timvisee/send-instances">instances</a> are available, with different characteristics,
such as more storage or longer available time.</p>
<h2 id="backups">Backups</h2>
<p>It is important to backup your data.
First, a note about <strong>cloud solutions</strong>.
<strong>Stay away!</strong>
Most cloud solutions will scan your data or keep copies of your data for years after deletion.
If you want to backup to the cloud use an <strong>encrypted cloud solution</strong>,
such as <a href="https://drive.proton.me">Proton Drive</a> or <a href="https://crypt.ee">Cryptee</a>.
Both have good cryptographic standards and zero-knowledge encryption,
but Cryptee has amazing features like no-KYC and plausible deniability,
apart from being hosted on Estonia (privacy-respecting country).</p>
<p>Said that, I highly advocate you do <strong>offline encrypted backups</strong>.
You can use open source and widely-available tools such as <a href="https://gnupg.org"><strong>GnuPG</strong></a>/<a href="https://www.veracrypt.fr/"><strong>VeraCrypt</strong></a> and <a href="https://rsync.samba.org/"><strong>rsync</strong></a>.
Or you can use automated open source tools
(that might not be widely-available, i.e. you would need to install manually)
such as <a href="https://github.com/brainfucksec/rbackup"><code>rbackup</code></a>.
<code>rbackup</code> is a simple
(with an easy-to-read codebase)
shell script for making backup of your Linux system with <code>rsync</code>.
Uses <code>tar</code> and <code>gzip</code> for compression and GnuPG for encryption.</p>
<h2 id="alternative-frontends">Alternative Frontends</h2>
<p>There are several FOSS alternative frontends such as
<a href="https://github.com/zedeus/nitter">Nitter</a>,
<a href="https://github.com/libreddit/libreddit">Libreddit</a>,
<a href="https://invidious.io/">Invidious</a>,
<a href="https://github.com/Metastem/wikiless">Wikiless</a>,
<a href="https://sr.ht/~cadence/bibliogram/">Bibliogram</a>,
and <a href="https://github.com/pablouser1/ProxiTok">ProxiTok</a>.
Use them whenever possible for a privacy-oriented consumption of those services.</p>
<p><a href="https://sr.ht/~benbusby/farside/">Farside</a> is redirecting service for FOSS alternative frontends.</p>
<p>Farside provides links that automatically redirect to working instances of privacy-oriented alternative frontends, such as Nitter, Libreddit, etc.
This allows for users to have more reliable access to the available public instances for a particular service,
while also helping to distribute traffic more evenly across all instances and avoid performance bottlenecks and rate-limiting.</p>
<p>Farside&rsquo;s links work with the following structure: <code>farside.link/&lt;service&gt;/&lt;path&gt;</code>.
Examples:</p>
<ul>
<li><code>https://farside.link/https://www.youtube.com/watch?v=dQw4w9WgXcQ</code> will redirect to a <a href="https://github.com/TeamPiped/Piped">Piped</a> or <a href="https://github.com/iv-org/invidious">Invidious</a> instance.</li>
<li><code>https://farside.link/reddit.com/r/popular</code> will redirect to a <a href="https://github.com/spikecodes/libreddit">Libreddit</a> or <a href="https://codeberg.org/teddit/teddit">Teddit</a> instance.</li>
</ul>
<h2 id="password-policy">Password Policy</h2>
<p><strong>Always generate strong passwords</strong>.
That means at least <a href="https://www.kicksecure.com/wiki/Passwords">200 bits of entropy for quantum secure</a>.
You can easily generate this with 15 words from the <a href="https://www.eff.org/dice">EFF wordlist</a>.</p>
<blockquote>
<p>NOTE: <a href="https://keepassxc.org">KeepassXC</a> <a href="https://keepassxc.org/">comes already with the EFF wordlist</a>.</p>
</blockquote>
<h2 id="cryptography">Cryptography</h2>
<p>Encryption of data is the only way to control who can access it.
<strong>Always encrypt sensitive data!</strong></p>
<h3 id="a-note-about-quantum-computers">A note about Quantum Computers</h3>
<p>Quantum computers are a threat to modern cryptographic algorithms and softwares.
<a href="https://en.wikipedia.org/wiki/Grover%27s_algorithm">Grover’s algorithm</a> shows that a quantum computer speeds up these attacks to <a href="https://www.schneier.com/blog/archives/2018/09/quantum_computi_2.html">effectively halve the key length</a>.
This would mean that a <a href="https://www.kicksecure.com/wiki/Passwords#Classical_vs_Quantum_Computing">256-bit key is as strong against a quantum computer as a 128-bit key is against a conventional computer</a>;
both are secure for the foreseeable future.</p>
<blockquote>
<p>NOTE: Passwords for LUKS FDE are secured using a key-stretching implementation known as a Password-Based Key Derivation Function (PBKDF).
The older <code>HMAC-SHA*</code> algorithm is less effective against parallelization by GPUs and ASICs &ndash; the same weaknesses suffered by Bitcoin against dedicated mining hardware.
Argon2id is the winner of the <a href="https://en.wikipedia.org/wiki/Password_Hashing_Competition">Password Hashing Competition</a>
and the state-of-the-art hashing algorithm of choice when protecting encryption keys.
Its memory-hard properties introduce a large penalty for brute-search on general computers and even more so on GPUs and ASICs.
Current versions of LUKS uses <code>argon2i</code> as the PBKDF.
To check this run <code>sudo cryptsetup luksDump /dev/&lt;luks-device&gt; | grep -E 'Version|cipher|key|PBKDF|Hash'</code>.</p>
</blockquote>
<h3 id="veracrypt">VeraCrypt</h3>
<p>I recommend <a href="https://www.veracrypt.fr/"><strong>VeraCrypt</strong></a>.
It is open source,
works on Windows/Mac/Linux,
You can encrypt a file, a partition, or a whole storage device.</p>
<p>In case an adversary forces you to reveal your password,
VeraCrypt provides and supports <a href="https://veracrypt.fr/en/Plausible%20Deniability.html"><strong>plausible deniability</strong></a>.
You can create <a href="https://veracrypt.fr/en/Hidden%20Volume.html"><strong>Hidden Volumes</strong></a>.
It may happen that you are forced by somebody to reveal the password to an encrypted volume.
There are many situations where you cannot refuse to reveal the password (for example, due to extortion).
Using a so-called hidden volume allows you to solve such situations without revealing the password to your volume.
If you type your default password you unlock the &ldquo;standard volume&rdquo;,
and if you type another password you unlock the &ldquo;hidden volume&rdquo;.
The hidden volume is where you would put all of your sensitive information.</p>
<h3 id="steganography">Steganography</h3>
<p><a href="https://en.wikipedia.org/wiki/Steganography"><strong>Steganography</strong></a> is the practice of concealing a message within another message or a physical object.
In computing/electronic contexts, a computer file, message, image, or video is concealed within another file, message, image, or video.
This is a very interesting technique where you can easily hide sensitive data into an innocent picture, text file or video.</p>
<p>You have a couple of options for steganography software:</p>
<ol>
<li><a href="https://github.com/StefanoDeVuono/steghide"><code>steghide</code></a>:
CLI available in almost every distro (Fedora, Debian, etc.) written in C++.</li>
<li><a href="https://github.com/dyne/Tomb#how-does-it-work"><code>tomb</code></a>:
a minimalist and easy to use CLI written as a simple shell script (Zsh) using standard filesystem tools (GNU) and the cryptographic API of the Linux kernel (cryptsetup and LUKS).</li>
</ol>
<h2 id="financial-sovereignty-with-bitcoin">Financial Sovereignty with Bitcoin</h2>
<blockquote>
<p>If you don&rsquo;t know the case for Bitcoin, check <a href="https://bitcoiner.guide/">bitcoiner.guide</a>.
For a quick intro on how to use it privately and safely check <a href="https://bitcoin-intro.com/">bitcoin-intro.com</a>.</p>
</blockquote>
<p>This list is always evolving.
Check <a href="https://kycnot.me/">kycnot.me</a>.</p>
<p>Regarding Bitcoin, you can:</p>
<ol>
<li>Use a prepaid Visa card with <a href="https://paywithmoon.com/">Moon</a>.</li>
<li>Use a prepaid gift card with <a href="https://coincards.com/">CoinCards</a>.</li>
<li>Swap Bitcoin for cash in <a href="https://coinatmradar.com/">Bitcoins ATM</a>.</li>
<li>Swap cash for Bitcoin using <a href="https://azte.co/">Azte.co</a>.
They are accepted in a lot of countries.
In Brazil, they are accepted in every lotérica.
All you need is a CPF number.
There&rsquo;s a 7% flat rate over the current exchange rate for BTC purchases.
You can withdraw to on-chain (USD 2.5 fee) or lightning (free).</li>
<li>P2P decentralized exchange of crypto with <a href="https://bisq.network/">bisq</a>,
<a href="https://learn.robosats.com/">robosats</a>,
<a href="https://localmonero.co/">localmonero</a> or <a href="https://agoradesk.com/">agoradesk</a>.</li>
<li>Swap Bitcoin for Monero with <a href="https://unstoppableswap.net/">atomic swaps</a>,
<a href="https://fixedfloat.com/">fixed float</a>,
<a href="https://sideshift.ai/">sideshift</a>
or <a href="https://majesticbank.sc/">majesticbank</a>;
see best rates at <a href="https://orangefren.com/">orangefren</a>.</li>
</ol>
<h3 id="wallets">Wallets</h3>
<blockquote>
<p>In case of losing your wallet, you are pretty much f***ed.
You might try your luck, in that case check <a href="https://walletsrecovery.org/"><code>walletsrecovery.org</code></a>.</p>
</blockquote>
<p>We have <strong>software wallets</strong> and <strong>hardware wallets</strong>.</p>
<p>Software wallets put your seed into the same device they are running.
So, if your device is compromised, so potentally is your seed.
Your precious cryptocurrencies could be in danger.</p>
<p>Hardware wallets are dedicated hardware to hold,
with tons of security features,
your private keys.
So, if your device is compromised,
your keys are probably safe from danger.
Or at least, way safer than if it were a software wallet.</p>
<blockquote>
<p>If you are not running your own <a href="https://node.guide">node</a>
(some reasons why you should do it <a href="https://armantheparman.com/why-should-you-run-your-own-bitcoin-node/">here</a>),
you should either use a trusted VPN (which none are) or the Tor network to connect to a trusted node (which again none are).</p>
</blockquote>
<h3 id="hardware-wallets">Hardware Wallets</h3>
<p>The only one I recommend are the ones from <a href="https://coinkite.com/">coinkite</a> which are Bitcoin-only.
They are very well-designed and almost impossible to breach.</p>
<p>There are two options:</p>
<ul>
<li>Higher-end option: <a href="https://coldcard.com/">COLDCARD</a>.</li>
<li>Cheap option: <a href="https://tapsigner.com/">TAPSIGNER</a>.</li>
</ul>
<h3 id="software-wallets">Software Wallets</h3>
<p>The best software wallet alternatives are to use Samourai and Monerujo,
for Bitcoin and Monero respectively,
in your GrapheneOS phone.
But you can also use any of these:</p>
<ol>
<li><strong>Bitcoin</strong>: Sparrow (Linux/MacOS/Windows), Electrum (Linux/MacOS/Windows/Android/iOS),
BlueWallet (F-Droid/iOS), Nunchuk (Android/iOS),
Samourai (Android/F-droid),
or Mutiny (Android/iOS but there&rsquo;s a PWA that runs in the browser).</li>
<li><strong>Monero</strong>: Monero Wallet CLI/GUI (Linux/MacOS/Windows), Cake (Android, iOS),
Monerujo (F-Droid) or MyMonero (Android/iOS).</li>
</ol>
<h2 id="honorable-mentions">Honorable Mentions</h2>
<ul>
<li>If you want a live USB secure OS, use <a href="https://tails.boum.org/">TailOS</a>.
It will load to RAM and will leave no trace in the host computer.
It also routes everything through Tor.
There&rsquo;s a guide on how to use it in <a href="https://anonymousplanet.org/guide.html#the-tails-route">anonymousplanet.org</a>.</li>
<li><a href="https://www.openbsd.org/">OpenBSD</a> is also a good alternative,
but is is still very restrictive.
It is a <strong>solid option for servers</strong>.
Check <a href="https://astro-gr.org/openbsd/">here for a lot of tutorials for daily usage</a>.</li>
<li>If you need an anonymous non-KYC eSIM card, use <a href="https://silent.link/">silent.link</a>.</li>
<li>If you need a SMS activation code,
use <a href="https://sms4sats.com/">sms4sats</a>,
<a href="https://juicysms.com/">juicysms</a>,
or <a href="https://lnvpn.net/phone-numbers">LNSMS</a></li>
</ul>
<h2 id="license">License</h2>
<p>This post is licensed under <a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International</a>.</p>
<p><a href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img loading="lazy" src="https://licensebuttons.net/l/by-nc-sa/4.0/88x31.png" alt="CC BY-NC-SA 4.0"  />
</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>What the hell is an Elliptic Curve?</title>
      <link>https://realeinherjar.github.io/2023-10-08-elliptic_curves/</link>
      <pubDate>Sun, 01 Oct 2023 16:08:15 -0300</pubDate>
      
      <guid>https://realeinherjar.github.io/2023-10-08-elliptic_curves/</guid>
      <description>Warning: This post has KaTeX enabled, so if you want to view the rendered math formulas, you&amp;rsquo;ll have to unfortunately enable JavaScript.
Note: All elliptic curve images are made using $\LaTeX$ and TikZ. The source code is freely available at GitHub.
What the hell is an Elliptic Curve? In this post, I&amp;rsquo;ll try to explain what an elliptic curve is, and why it&amp;rsquo;s so important in cryptography. If you ever used an end-to-end encrypted messaging app, or hold Bitcoin (or any other shitcoin, though I don&amp;rsquo;t recommend it), you&amp;rsquo;ve probably heard of elliptic curves.</description>
      <content:encoded><![CDATA[<blockquote>
<p>Warning: This post has <a href="https://katex.org/">KaTeX</a> enabled,
so if you want to view the rendered math formulas,
you&rsquo;ll have to unfortunately enable JavaScript.</p>
<p>Note: All elliptic curve images are made using $\LaTeX$ and TikZ.
The source code is freely available at <a href="https://gist.github.com/realeinherjar/84061e78c85e08476f373e77c5a652ac">GitHub</a>.</p>
</blockquote>
<p>What the hell is an Elliptic Curve?
In this post, I&rsquo;ll try to explain what an elliptic curve is,
and why it&rsquo;s so important in cryptography.
If you ever used an end-to-end encrypted messaging app,
or hold Bitcoin (or any other shitcoin, though I don&rsquo;t recommend it),
you&rsquo;ve probably heard of elliptic curves.
It is important to know that elliptic curves are not only used in cryptography,
but also in many other fields of mathematics,
such as number theory, algebraic geometry, and topology.</p>
<p>My main argument is that elliptic curves are not that hard to understand.
Additionally, since encryption is ubiquitous in our daily lives,
<strong>understanding them is important to be a well-informed citizen</strong>.
I&rsquo;ll try to explain the concepts in a simple way,
but I&rsquo;ll assume you have some basic knowledge of algebra and math symbols.
Finally, I&rsquo;ll use the standard math notation,
so that when you read about elliptic curves in other places,
you&rsquo;ll be able to make connections more easily.</p>
<h2 id="what-is-an-elliptic-curve">What is an Elliptic Curve?</h2>
<p><strong>An <a href="https://en.wikipedia.org/wiki/Elliptic_curve"><em>elliptic curve</em></a> is a curve defined by the equation</strong></p>
<p>$$y^2 = x^3 + ax + b$$</p>
<p>where $a$ and $b$ are real numbers.</p>
<p>Here&rsquo;s an example of an elliptic curve,
if you set $a = 0$ and $b = 7$:</p>
<p>$$y^2 = x^3 + 7$$</p>
<p><strong>This is <a href="https://en.bitcoin.it/wiki/Secp256k1"><code>secp256k1</code></a>,
the notorious elliptic curve used in Bitcoin</strong>.</p>
<figure>
    <img loading="lazy" src="ec.png"/> <figcaption>
            secp256k1 curve
        </figcaption>
</figure>

<p>Elliptic curves have some properties that make them interesting.
For example, they are <strong>symmetric with respect to the $x$-axis</strong>.
This means that if $(x, y)$ is a point in the curve,
then $(x, -y)$ is also a point in the curve<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.
This is because $(-y)^2 = y^2$.</p>
<h3 id="adding-points-in-an-elliptic-curve">Adding Points in an Elliptic Curve</h3>
<p>If you have two points $P$ and $P^\prime$ in the curve,
then the line that passes through them will intersect the curve in a third point<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>
$P^{\prime\prime}$:</p>
<figure>
    <img loading="lazy" src="ec_point.png"/> <figcaption>
            Two Points in an Elliptic Curve
        </figcaption>
</figure>

<p>If you reflect $P^{\prime\prime}$ with respect to the $x$-axis,
you&rsquo;ll get a new point:</p>
<figure>
    <img loading="lazy" src="ec_point_add.png"/> <figcaption>
            Adding Two Points in an Elliptic Curve
        </figcaption>
</figure>

<p>This is how you <strong>add two points in an elliptic curve</strong>.
Note that the result of adding two points is <strong>also a point in the curve</strong>.
This property is called <em>closure</em>.
For any two points $P$ and $P^\prime$ in the curve,
$P + P^\prime$ is also a point in the curve.</p>
<p>There are <strong>two cases where the line doesn&rsquo;t intersect the curve in a third point</strong>.
The first one is when $P = P^\prime$.</p>
<figure>
    <img loading="lazy" src="ec_point_tangent.png"/> <figcaption>
            Adding a Point to Itself in an Elliptic Curve
        </figcaption>
</figure>

<p>Then we have a tangent line.
In this case we take derivatives on both sides:</p>
<p>$$\begin{aligned}
y^2 &amp;= x^3 + ax + b \\
2y \frac{dy}{dx} &amp;= 3x^2 + a \\
\frac{dy}{dx} &amp;= \frac{3x^2 + a}{2y}
\end{aligned}$$</p>
<p>Hence, $2*P = (x, y)$ where $x = \left( \frac{3x^2 + a}{2y} \right) - 2x$,
and $y = \left( \frac{3x^2 + a}{2y} \right) (x - x) - y$.</p>
<p>The other is when $P^\prime$ is the reflection of $P$ with respect to the $x$-axis.</p>
<figure>
    <img loading="lazy" src="ec_point_vertical.png"/> <figcaption>
            Adding a Point to Its Reflection in an Elliptic Curve
        </figcaption>
</figure>

<p>Then we have a vertical line.
In this case we define $P + P^\prime = \mathcal{O}$,
where $\mathcal{O}$ is the <strong>point at infinity</strong>.</p>
<h3 id="point-addition-properties">Point Addition Properties</h3>
<p>Point addition satisfies some properties:</p>
<ul>
<li><strong>Identity</strong>: $P + \mathcal{O} = \mathcal{O} + P = P$</li>
<li><strong>Commutativity</strong>: $P + P^\prime = P^\prime + P$</li>
<li><strong>Associativity</strong>: $(P + P^\prime) + P^{\prime\prime} = P + (P^\prime + P^{\prime\prime})$</li>
<li><strong>Inverse Element</strong>: $P + (-P) = \mathcal{O}$</li>
<li><strong>Closure</strong>: $P + P^\prime$ is a point in the curve</li>
</ul>
<p>Hey this is very similar to addition of integers!
But using points instead of integers.</p>
<p>In fact, we can define <strong>multiplication</strong> of a point $P$ by an integer $n$ as:</p>
<p>$$\underbrace{P + P + \cdots + P}_{n \text{ times}}$$</p>
<h3 id="abelian-groups">Abelian Groups</h3>
<p>The set of points in an elliptic curve with the point at infinity $\mathcal{O}$
along with a binary operation $+$ that satisfies the properties above is called an
<a href="https://en.wikipedia.org/wiki/Abelian_group"><em>Abelian group</em></a>.
In honor of Niels Henrik Abel, an Abelian group is a <strong>set with a binary operation that
satisfies all the properties above</strong>.</p>
<p>Another example of an Abelian group is the set of integers $\mathbb{Z}$ with addition $+$.
And another one is the set of natural numbers $\mathbb{N}$ with multiplication $\times$.</p>
<h2 id="fields">Fields</h2>
<p>There&rsquo;s one more concept that we need to learn before we can talk about cryptography.
It&rsquo;s called a finite field.
But before we talk about finite fields,
we need to first define a <strong>field</strong>.
<strong><a href="https://en.wikipedia.org/wiki/Field_(mathematics)">Fields</a> are sets with two binary operations,
called addition $+$ and multiplication $\times$</strong>.
We write</p>
<p>$$F = (F, +, \times)$$</p>
<p>to denote a field,
where $F$ is the set, $+$ is the addition operation,
and $\times$ is the multiplication operation.</p>
<p>Addition and multiplication behave similar to the addition and multiplication of real numbers.
For example, addition is <strong>commutative</strong> and <strong>associative</strong></p>
<p>$$a + b = b + a,$$</p>
<p>and multiplication is <strong>distributive</strong></p>
<p>$$a \times (b + c) = a \times b + a \times c.$$</p>
<p>Also, there are two special elements in the field,
called the <strong>additive identity</strong> $-a$ and the <strong>multiplicative identity</strong> $a^{-1}$,
such that</p>
<p>$$a + (-a) = I,$$</p>
<p>and</p>
<p>$$a \times a^{-1} = I,$$</p>
<p>where $I$ is the identity element.</p>
<p>Note that this allows us to define <strong>subtraction</strong></p>
<p>$$a - b = a + (-b),$$</p>
<p>and <strong>division</strong></p>
<p>$$a \div b = a \times b^{-1}.$$</p>
<h3 id="finite-fields">Finite Fields</h3>
<p>Now we are ready for finite fields.
A <a href="https://en.wikipedia.org/wiki/Finite_field"><em>finite field</em></a>, also called a Galois field (in honor of Évariste Galois),
is a <strong>field with a finite number of elements.
As with any field, a finite field is a set on which the operations of multiplication,
addition, subtraction and division are defined and satisfy the rules above for fields</strong>.</p>
<p>Finite fields is a very rich topic in mathematics,
and there are many ways to construct them.
The easiest way to construct a finite field is to take the <strong>integers modulo a prime number $p$</strong>.
For example $\mathbb{Z}_4$ is a finite field with 4 elements:</p>
<p>$$\mathbb{Z}_4 = \lbrace 0, 1, 2, 3 \rbrace.$$</p>
<p>In general, $\mathbb{Z}_n$ is a finite field with $n$ elements:</p>
<p>$$\mathbb{Z}_n = \lbrace 0, 1, 2, \ldots, n - 1 \rbrace.$$</p>
<p><strong>The number of elements in a finite field is called the <em>order</em> of the field</strong>.
The order of a finite field is <strong>always a prime number $p$</strong>.
The $\mathbb{Z}_4$ example above is a finite field of order 2.
To see that notice that $4$ is a composite number,</p>
<p>$$4 = 2 \times 2.$$</p>
<p>And we can write $\mathbb{Z}_4$ as</p>
<p>$$\mathbb{Z}_4 = 2 \times \mathbb{Z}_2.$$</p>
<p>This means that every element in $a \in \mathbb{Z}_4$ can be written as</p>
<p>$$a = 2 \times b,$$</p>
<p>where $b$ is an element in $\mathbb{Z}_2$.</p>
<p>Hence, not every element of $\mathbb{Z}_4$ is unique, and they are equivalent to the elements in $\mathbb{Z}_2$.</p>
<p>In general if $n$ is a composite number,
then $\mathbb{Z}_n$ is not a finite field.
However, if $n = r \times s$ where $r$ and $s$ are prime numbers,
and $r &lt; s$,
then $\mathbb{Z}_n$ is a finite field of order $r$.</p>
<h4 id="operations-in-finite-fields">Operations in Finite Fields</h4>
<p><strong>Addition</strong> in finite fields is defined as the remainder of the sum of two elements modulo the order of the
field.</p>
<p>For example, in $\mathbb{Z}_3$,</p>
<p>$$1 + 2 = 3 \mod 3 = 0.$$</p>
<p>We can also define subtraction in finite fields as the remainder of the difference of two elements modulo the order of the field.</p>
<p>For example, in $\mathbb{Z}_3$,</p>
<p>$$1 - 2 = -1 \mod 3 = 2.$$</p>
<p>Multiplication in finite fields can be written as multiple additions.
For example, in $\mathbb{Z}_3$,</p>
<p>$$2 \times 2 = 2 + 2 = 4 \mod 3 = 1.$$</p>
<p>Exponentiation in finite fields can be written as multiple multiplications.
For example, in $\mathbb{Z}_3$,</p>
<p>$$2^2 = 2 \times 2 = 4 \mod 3 = 1.$$</p>
<p>This is very trivial for any finite field.
However, for division we are pretty much screwed.
It is really hard to find the multiplicative inverse of an element in a finite field.
For example, suppose that we have numbers $a,b$ in a very large finite field $\mathbb{Z}_n$,
such that</p>
<p>$$c = a \times b \mod n.$$</p>
<p>Then we can write division as</p>
<p>$$a = c \div b = c \times b^{-1} \mod n.$$</p>
<p>Now we need to find $b^{-1}$.
This is called the <a href="https://en.wikipedia.org/wiki/Discrete_logarithm"><strong><em>discrete logarithm problem</em></strong></a>.
Because we need to find the exponent $b^{-1}$ such that</p>
<p>$$b^{-1} = \log_b c \mod n.$$</p>
<p>Since this number is a discrete number and not a real number,
that&rsquo;s why it&rsquo;s called the discrete logarithm problem.</p>
<p>Good luck my friend, no efficient method is known for computing them in general.
You can try brute force, but that&rsquo;s not efficient.</p>
<h5 id="why-the-discrete-logarithm-problem-is-hard-as-fuck">Why the Discrete Logarithm Problem is Hard as Fuck</h5>
<p>To get a feeling why the discrete logarithm problem is difficult,
let&rsquo;s add one more concept to our bag of knowledge.
Every finite field has <em><strong>generators</strong></em>,
also known as <em><strong>primitive roots</strong></em>,
which is also a member of the group,
such that applying multiplication to this one single element
makes possible to generate the whole finite field.</p>
<p>Let&rsquo;s illustrate this with an example.
Below we have a table of all the results of the following operation</p>
<p>$$b^x \mod 7$$</p>
<p>for every possible value of $x$.
As you&rsquo;ve guessed right this is the $\mathbb{Z}_7$ finite field.</p>
<table>
<thead>
<tr>
<th style="text-align:center">$b$</th>
<th style="text-align:center">$b^1 \mod 7$</th>
<th style="text-align:center">$b^2 \mod 7$</th>
<th style="text-align:center">$b^3 \mod 7$</th>
<th style="text-align:center">$b^4 \mod 7$</th>
<th style="text-align:center">$b^5 \mod 7$</th>
<th style="text-align:center">$b^6 \mod 7$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">$1$</td>
<td style="text-align:center">$1$</td>
<td style="text-align:center">$1$</td>
<td style="text-align:center">$1$</td>
<td style="text-align:center">$1$</td>
<td style="text-align:center">$1$</td>
<td style="text-align:center">$1$</td>
</tr>
<tr>
<td style="text-align:center">$2$</td>
<td style="text-align:center">$2$</td>
<td style="text-align:center">$4$</td>
<td style="text-align:center">$1$</td>
<td style="text-align:center">$2$</td>
<td style="text-align:center">$4$</td>
<td style="text-align:center">$1$</td>
</tr>
<tr>
<td style="text-align:center">$3$</td>
<td style="text-align:center">$3$</td>
<td style="text-align:center">$2$</td>
<td style="text-align:center">$6$</td>
<td style="text-align:center">$4$</td>
<td style="text-align:center">$5$</td>
<td style="text-align:center">$1$</td>
</tr>
<tr>
<td style="text-align:center">$4$</td>
<td style="text-align:center">$4$</td>
<td style="text-align:center">$2$</td>
<td style="text-align:center">$1$</td>
<td style="text-align:center">$4$</td>
<td style="text-align:center">$2$</td>
<td style="text-align:center">$1$</td>
</tr>
<tr>
<td style="text-align:center">$5$</td>
<td style="text-align:center">$5$</td>
<td style="text-align:center">$4$</td>
<td style="text-align:center">$6$</td>
<td style="text-align:center">$2$</td>
<td style="text-align:center">$3$</td>
<td style="text-align:center">$1$</td>
</tr>
<tr>
<td style="text-align:center">$6$</td>
<td style="text-align:center">$6$</td>
<td style="text-align:center">$1$</td>
<td style="text-align:center">$6$</td>
<td style="text-align:center">$1$</td>
<td style="text-align:center">$1$</td>
<td style="text-align:center">$1$</td>
</tr>
</tbody>
</table>
<p>You see that something interesting is happening here.
For specific values of $b$, such as $b = 3$, and $b = 5$, we are able to <strong>generate the whole finite field</strong>.
Hence, say that $3$ and $5$ are <em><strong>generators</strong></em> or <em><strong>primitive roots</strong></em> of $\mathbb{Z}_7$.</p>
<p>Now suppose I ask you to find $x$ in the following equation</p>
<p>$$3^x \mod p = 11$$</p>
<p>where $p$ is a very large prime number.
Then you don&rsquo;t have any other option than brute forcing it.
<strong>You&rsquo;ll need to try each exponent $x$ until you find the one that satisfies the equation</strong>.</p>
<p>Notice that this operation is very asymmetric.
It is very easy to compute $3^x \mod p$ for any $x$,
but it is very hard to find $x$ given $3^x \mod p$.</p>
<h2 id="bringing-it-all-together">Bringing it All Together</h2>
<p>Now we are ready to talk about elliptic curve cryptography.
<strong>Elliptic curve cryptography is a public-key encryption technique based on elliptic curves</strong>.
It is used to create public and private keys for asymmetric cryptography.</p>
<p>Your <strong>private key is a random number $k$</strong>.
Your <strong>public key is the point $kG$ in the elliptic curve</strong>,
where $G$ is a point and a generator of the elliptic curve.
We know that $kG$ is a point in the elliptic curve,
because elliptic curves are Abelian groups,
having the closure property,
then</p>
<p>$$kG = \underbrace{G + G + \cdots + G}_{k \text{ times}}$$</p>
<p>is also a point in the elliptic curve.</p>
<p>Now here comes the grand finale.
Since elliptic curves are finite fields,
then we can use the discrete logarithm problem to our advantage.
<strong>It is very easy to compute $kG$ given $k$ and $G$</strong>.
But it is <strong>hard as fuck to find $k$ given $kG$ and $G$</strong>.</p>
<h2 id="the-secp256k1-elliptic-curve">The <code>secp256k1</code> Elliptic Curve</h2>
<p>Let&rsquo;s talk about some facts<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> about our muse <code>secp256k1</code> elliptic curve:</p>
<ul>
<li><strong>Equation</strong>: $y^2 = x^3 + 7$</li>
<li><strong>$\mathbb{F}_p$ where $p$</strong>: $2^{256} - 2^{32} - 2^9 - 2^8 - 2^7 - 2^6 - 2^4 - 1$ (yes, it is a prime number)</li>
<li><strong>Order $n$</strong>: this is the number of possible points in the curve<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>, 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup></li>
<li><strong>Generator Point $G$</strong>: (0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798, 0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8)<sup id="fnref1:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup></li>
</ul>
<h2 id="license">License</h2>
<p>This post is licensed under <a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International</a>.</p>
<p><a href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img loading="lazy" src="https://licensebuttons.net/l/by-nc-sa/4.0/88x31.png" alt="CC BY-NC-SA 4.0"  />
</a></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>This is also why transaction malleability was a problem before Segwit in Bitcoin.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>If the line is vertical or tangent to the curve,
then it intersects the curve in a point at infinity.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>These are standard and defined in the <a href="https://www.secg.org/">Standards for Efficient Cryptography Group</a>
in their <a href="https://www.secg.org/sec2-v2.pdf">SEC 2 specification</a>.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>To find the order of an elliptic curve, you can use <a href="https://en.wikipedia.org/wiki/Schoof%27s_algorithm#The_algorithm">Schoof&rsquo;s algorithm</a>.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>It is a fucking big number, so I am putting the values in hexadecimal representation.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref1:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Taproot Basics</title>
      <link>https://realeinherjar.github.io/2023-09-08-taproot/</link>
      <pubDate>Sat, 02 Sep 2023 12:10:10 -0300</pubDate>
      
      <guid>https://realeinherjar.github.io/2023-09-08-taproot/</guid>
      <description>Warning: This post has KaTeX enabled, so if you want to view the rendered math formulas, you&amp;rsquo;ll have to unfortunately enable JavaScript.
While attending the 2023 edition of TabConf, hosted in Atlanta, USA, from Sep 6th to Sep 9th, I also attended Base58&amp;rsquo;s intensive course on Taproot and Schnorr signatures. The course took place in the two days before the conference, on Sep 4th and Sep 5th.
Here is a very broad overview based on my notes, a bunch of readings and some of my own research.</description>
      <content:encoded><![CDATA[<blockquote>
<p>Warning: This post has <a href="https://katex.org/">KaTeX</a> enabled,
so if you want to view the rendered math formulas,
you&rsquo;ll have to unfortunately enable JavaScript.</p>
</blockquote>
<p>While attending the 2023 edition of <a href="https://tabconf.com">TabConf</a>,
hosted in Atlanta, USA, from Sep 6th to Sep 9th,
I also attended <a href="https://base58.school">Base58</a>&rsquo;s
intensive course on <a href="https://bitcoinops.org/en/topics/taproot/">Taproot</a>
and <a href="https://en.wikipedia.org/wiki/Schnorr_signature">Schnorr signatures</a>.
The course took place in the two days before the conference,
on Sep 4th and Sep 5th.</p>
<p>Here is a very broad overview based on my notes,
a bunch of readings and some of my own research.
I am omitting a lot of details here.
If you want to learn more,
whenever you see a footnote,
or a like to a Bitcoin Imporvement Proposal (BIP),
go check it out.</p>
<h2 id="taproot-design-goals">Taproot Design Goals</h2>
<p>Taproot was activated as a soft fork in <strong>November 2021</strong>.</p>
<p>The <strong>design goals of Taproot</strong> are:</p>
<ul>
<li><strong>Increase privacy</strong>: hide the spending conditions
and also hide the fact that you are using a multisig.</li>
<li><strong>Reduce the amount of data on-chain</strong>: you only need to commit
to the root of the tree, and not the leaves.</li>
<li><strong>Use Schnorr</strong>: Schnorr signatures are more efficient
and allow for signature aggregation.</li>
</ul>
<h2 id="schnorr-signatures">Schnorr Signatures</h2>
<p><a href="https://en.wikipedia.org/wiki/Schnorr_signature"><strong>Schnorr signatures</strong></a>
are a type of digital signature scheme
that provides security and efficiency advantages
over traditional ECDSA (Elliptic Curve Digital Signature Algorithm) signatures.
They were proposed by the mathematician and cryptographer <a href="https://en.wikipedia.org/wiki/Claus_P._Schnorr">Claus-Peter Schnorr</a>.
Schnorr signatures improve privacy, scalability, and security.
Due to the commutativity property,
Schnorr signatures can be aggregated,
allowing multiple signatures to be combined into a single signature.
This improves privacy by <strong>obscuring the number of participants
in a multi-signature transaction</strong>.
They are detailed in <a href="https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki">BIP 340</a>.
The nice thing about Schnorr signatures is that
the <strong>sum of private keys is equal to the private key of the sum of public keys</strong>.
This is what I call <strong>&ldquo;commutativity property&rdquo;</strong>,
and allows for <strong>signature aggregation</strong><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>Here&rsquo;s in a more formal way:</p>
<p>$$ P = p \cdot G $$</p>
<p>where $G$ is the generator point<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>
and $p$ is the sum of $n$ private keys,</p>
<p>$$ p = \sum_{i=1}^{n} p_i $$</p>
<p>and $P$ is the sum of $n$ public keys<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>:</p>
<p>$$ P = \sum_{i=1}^{n} p_i \cdot G $$</p>
<h2 id="validation-of-taproot-scripts">Validation of Taproot Scripts</h2>
<p>The validation of Taproot Scripts as detailed in
<a href="https://github.com/bitcoin/bips/blob/master/bip-0342.mediawiki">BIP 342</a>,
that deals with <code>OP_CHECKSIG</code> and <code>OP_CHECKSIGADD</code> opcodes<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>.
This does Schnorr signature aggregation during the Script execution.</p>
<p>A 2-of-3 multisig with Schnorr signatures spending Script with <code>OP_CHECKSIG</code>
and <code>OP_CHECKSIGADD</code> would be:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">pubkey1 OP_CHECKSIG pubkey2 OP_CHECKSIGADD pubkey3 OP_CHECKSIGADD OP_2 OP_EQUAL
</span></span></code></pre></div><p>This would reveal everyone&rsquo;s public keys on-chain,
and also the fact that it is a multisig, with all of the conditions.
Additionally, it would be expensive to spend,
due to the number of bytes required to commit to the Script on-chain.</p>
<p>There are more elegant ways to do this with Taproot Spending Rules
and Merkle Trees, which we&rsquo;ll see next.</p>
<h2 id="taproot-merkle-tree">Taproot Merkle Tree</h2>
<p>Taproot is a series of spending conditions that are defined
in a binary tree.
Instead of a bunch of conditions that are visible using a Script,
we have a binary tree with merkle roots.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">            Root
</span></span><span class="line"><span class="cl">             |
</span></span><span class="line"><span class="cl">             |
</span></span><span class="line"><span class="cl">         /       \
</span></span><span class="line"><span class="cl">        /         \
</span></span><span class="line"><span class="cl">       /           \
</span></span><span class="line"><span class="cl">    Cond 1       Cond 2
</span></span><span class="line"><span class="cl">                  /  \
</span></span><span class="line"><span class="cl">                 /    \
</span></span><span class="line"><span class="cl">             Cond 3   Cond 4
</span></span></code></pre></div><p>The root is a hash, and is implicity commited to on-chain.
The conditions are not visible on-chain,
because you just commit the hash of the root on-chain.</p>
<p>The way you build the root is by hashing all the intermediate states<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>,
is by hashing all the leaves and branches below the root node.
This is done using a $\operatorname{hash}(l \mid\mid r)$ function,
where $l$ is the left node and $r$ is the right node<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup>.
The locking script will be:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">script: &lt;version-byte&gt; &lt;data&gt;
</span></span></code></pre></div><p>where:</p>
<ul>
<li><code>&lt;version-byte&gt;</code> is the version byte.
This is the version number of our &ldquo;segwit script&rdquo;.</li>
<li><code>&lt;data&gt;</code> is <code>P_x</code>, the x-coordinate of the (tweaked) public key<sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup>.</li>
</ul>
<h2 id="taproot-spending-rules">Taproot Spending Rules</h2>
<p>Taproot spending rules are detailed in <a href="https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki">BIP 341</a>.
The way Taproot works is that you have a locking script
where all the spending conditions are hidden.
This is just the hash of the root of the binary tree below.
The way you construct the script is by using a merkle tree,
and hashing all the intermediate states,
i.e. all the leaves and branches below the root node.
The hash is done by concatenating the string representation
of the two things you want to hash and applying SHA256<sup id="fnref1:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">hash = SHA256(left || right)
</span></span></code></pre></div><p>In the following example,
you would hash <code>Cond 3</code> with <code>Cond 4</code>,
then hash the result with <code>Cond 1</code>.
This is the root commitment,
i.e. the root node,
and the thing you publish on-chain.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">       Root commitment
</span></span><span class="line"><span class="cl">       (locking script)
</span></span><span class="line"><span class="cl">             |
</span></span><span class="line"><span class="cl">             |
</span></span><span class="line"><span class="cl">         /       \
</span></span><span class="line"><span class="cl">        /         \
</span></span><span class="line"><span class="cl">       /           \
</span></span><span class="line"><span class="cl">    Cond 1       Cond 2
</span></span><span class="line"><span class="cl">    (leaf)      (branch)
</span></span><span class="line"><span class="cl">                  /  \
</span></span><span class="line"><span class="cl">                 /    \
</span></span><span class="line"><span class="cl">             Cond 3   Cond 4
</span></span><span class="line"><span class="cl">             (leaf)   (leaf)
</span></span></code></pre></div><p>We have 3 leaves here: <code>Cond 1</code>, <code>Cond 3</code> and <code>Cond 4</code>,
and 1 branch: <code>Cond 2</code>.</p>
<p>The way the spening rules work is that you have to provide a proof-of-inclusion,
which depends on the leaf you want to spend.
So if you want to spend <code>Cond 3</code>,
you need to provide the hash of <code>Cond 4</code> and <code>Cond 1</code>.
Whereas, if you want to spend <code>Cond 1</code>,
you just need to provide the hash of <code>Cond 1</code> and the hash of the branch <code>Cond 2</code>.
Hence, spending conditions that are higher in the tree are cheaper to spend,
because you need to commit less data on-chain.
That is why we structure the tree as most probable to be used on top.</p>
<h2 id="musig2">MuSig2</h2>
<p><a href="https://eprint.iacr.org/2020/1261">MuSig2</a>,
detailed in <a href="https://github.com/bitcoin/bips/blob/master/bip-0327.mediawiki">BIP 327</a>,
is similar to <code>OP_CHECKSIGADD</code>.
It allows for signature aggregation in the locking script,
and also in the unlocking script.
Hence, you can have any multisig with Schnorr signatures,
without revealing anything related to the number of participants on-chain,
multisig conditions, etc.
However,
you now need to put all the possible combinations of the pubkeys in the Script.
Mind you that this is not a problem,
because the resulting aggregate signature
will not reveal the underlying individual signatures.</p>
<p>Here&rsquo;s a MuSig2 example 2-of-3 threshold,
you&rsquo;ll need 3 spending conditions:</p>
<p>$$P_1 + P_2$$
$$P_1 + P_3$$
$$P_2 + P_3$$</p>
<p>where $P_n$ is the public key of the $n$-th participant.</p>
<p>Generally, for $n$ pubkeys with a threshold of $t$,
you need a list of size $\binom{n}{t}$ for all possible combinations.</p>
<p>Continuing the example,
for every two pairs of pubkeys,
aggregate them using elliptic curve cryptography modular algebra,
tweak them (if necessary)<sup id="fnref1:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup>,
and create a script:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">(P_1 + P_2) OP_CHECKSIG
</span></span></code></pre></div><p>Next, you consruct your Taproot tree listing all the possible spending conditions.
(Remember to prioritize by the most plausible spending conditions on top).
Calculate the root commitment by hashing all the intermediate states,
which are the spending conditions on each leaf or branch,
from bottom to top.
Pick an internal key
and if necessary, tweak<sup id="fnref2:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup> it to derive an external key.
Finally, lock up some bitcoin to the root commitment.
That&rsquo;s it!
You have a Taproot tree with MuSig2 that is compact on-chain,
and also private.
Additionally, you can add more creative spending conditions using Script
to the leaves of the tree.</p>
<p>To spend it, in your unlocking script,
you&rsquo;ll need to provide a proof-of-inclusion
of the spending condition you want to spend,
and the aggregated signature to unlock that spending condition.</p>
<h2 id="license">License</h2>
<p>This post is licensed under
<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International</a>.</p>
<p><a href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img loading="lazy" src="https://licensebuttons.net/l/by-nc-sa/4.0/88x31.png" alt="CC BY-NC-SA 4.0"  />
</a></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Signature aggregations depends on a series of rounds of communication,
proposed in <a href="https://eprint.iacr.org/2018/068.pdf"><strong>MuSig</strong></a>
(3 rounds of communication),
and superseeded by
<a href="https://eprint.iacr.org/2020/1261"><strong>MuSig2</strong></a>
(which needs 2 rounds of communication, instead of 3)
and detailed in <a href="https://github.com/bitcoin/bips/blob/master/bip-0327.mediawiki">BIP 327</a>.
There are tweaks to the internal key,
and also nonce generation and aggregation.
I won&rsquo;t go in to the scope of BIP 327 here,
but I recommend you to read it if you want to know more.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>If you don&rsquo;t know what a generator point is,
check the <a href="https://en.wikipedia.org/wiki/Elliptic-curve_cryptography#Domain_parameters">Wikipedia article on Elliptic Curve Cryptography</a>.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>Don&rsquo;t forget to $\mod{n}$.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>See the <a href="https://en.bitcoin.it/wiki/Script">Script page at Bitcoin Wiki</a>.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>Additionally you need to provide a tag,
which are detailed in <a href="https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki">BIP 340</a>.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p>There are some rules to remove ambiguity
on which one will be the <code>left</code> and <code>right</code> node in the hash function.&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref1:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7">
<p>In Taproot Spending rules,
you can have an internal key and an external key.
The internal key is tweaked with &ldquo;tag&rdquo; hashes to derive the external key.
Check <a href="https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki">BIP 341</a>.&#160;<a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref1:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref2:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
